{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Ponet_ML_Notebook-Resit.ipynb",
      "provenance": [],
      "mount_file_id": "1-mKYd2nKfrQd5A5L0vZ3dTxJIy83vEKt",
      "authorship_tag": "ABX9TyMUnieZWVdqL1X3p4DlL+Nr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Noobventurer/Learning-Curve/blob/main/Ponet_ML_Notebook_Resit.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IpTtpr4P0_4m"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Dense, Input\n",
        "from tensorflow import keras\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import itertools\n",
        "import seaborn as sns\n",
        "sns.set(style=\"darkgrid\", font_scale=1.2)\n",
        "from sklearn.linear_model import LinearRegression \n",
        "from sklearn import metrics \n",
        "from sklearn.metrics import mean_squared_error\n",
        "from numpy import unique\n",
        "from numpy import argmax\n",
        "from pandas import read_csv\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from tensorflow.keras.utils import plot_model\n",
        "from keras.models import Sequential\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a3WabyPe1W_C",
        "outputId": "4ef054f9-ed61-439a-8dde-16f5a3cef30d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "red_df = pd.read_csv('/content/drive/MyDrive/Datasets/winequality-red.csv', sep=\";\")\n",
        "white_df = pd.read_csv('/content/drive/MyDrive/Datasets/winequality-white.csv',sep=\";\")"
      ],
      "metadata": {
        "id": "9pJNJZlR1DEo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "gxmGlNJZ1Fmp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NI3853bvNDEF"
      },
      "source": [
        "## Data Exploration"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "red_df.info(), white_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FiIgUxrIc6K0",
        "outputId": "a4db9dc2-a6be-48ce-9fc2-2ec042f45ac3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1599 entries, 0 to 1598\n",
            "Data columns (total 12 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         1599 non-null   float64\n",
            " 1   volatile acidity      1599 non-null   float64\n",
            " 2   citric acid           1599 non-null   float64\n",
            " 3   residual sugar        1599 non-null   float64\n",
            " 4   chlorides             1599 non-null   float64\n",
            " 5   free sulfur dioxide   1599 non-null   float64\n",
            " 6   total sulfur dioxide  1599 non-null   float64\n",
            " 7   density               1599 non-null   float64\n",
            " 8   pH                    1599 non-null   float64\n",
            " 9   sulphates             1599 non-null   float64\n",
            " 10  alcohol               1599 non-null   float64\n",
            " 11  quality               1599 non-null   int64  \n",
            "dtypes: float64(11), int64(1)\n",
            "memory usage: 150.0 KB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4898 entries, 0 to 4897\n",
            "Data columns (total 12 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         4898 non-null   float64\n",
            " 1   volatile acidity      4898 non-null   float64\n",
            " 2   citric acid           4898 non-null   float64\n",
            " 3   residual sugar        4898 non-null   float64\n",
            " 4   chlorides             4898 non-null   float64\n",
            " 5   free sulfur dioxide   4898 non-null   float64\n",
            " 6   total sulfur dioxide  4898 non-null   float64\n",
            " 7   density               4898 non-null   float64\n",
            " 8   pH                    4898 non-null   float64\n",
            " 9   sulphates             4898 non-null   float64\n",
            " 10  alcohol               4898 non-null   float64\n",
            " 11  quality               4898 non-null   int64  \n",
            "dtypes: float64(11), int64(1)\n",
            "memory usage: 459.3 KB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(None, None)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "red_df.isna() , white_df.isna()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GsYJWJ1lczYv",
        "outputId": "e33851f0-8e19-410b-847e-74857dfe1baf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              " 0             False             False        False           False      False   \n",
              " 1             False             False        False           False      False   \n",
              " 2             False             False        False           False      False   \n",
              " 3             False             False        False           False      False   \n",
              " 4             False             False        False           False      False   \n",
              " ...             ...               ...          ...             ...        ...   \n",
              " 1594          False             False        False           False      False   \n",
              " 1595          False             False        False           False      False   \n",
              " 1596          False             False        False           False      False   \n",
              " 1597          False             False        False           False      False   \n",
              " 1598          False             False        False           False      False   \n",
              " \n",
              "       free sulfur dioxide  total sulfur dioxide  density     pH  sulphates  \\\n",
              " 0                   False                 False    False  False      False   \n",
              " 1                   False                 False    False  False      False   \n",
              " 2                   False                 False    False  False      False   \n",
              " 3                   False                 False    False  False      False   \n",
              " 4                   False                 False    False  False      False   \n",
              " ...                   ...                   ...      ...    ...        ...   \n",
              " 1594                False                 False    False  False      False   \n",
              " 1595                False                 False    False  False      False   \n",
              " 1596                False                 False    False  False      False   \n",
              " 1597                False                 False    False  False      False   \n",
              " 1598                False                 False    False  False      False   \n",
              " \n",
              "       alcohol  quality  \n",
              " 0       False    False  \n",
              " 1       False    False  \n",
              " 2       False    False  \n",
              " 3       False    False  \n",
              " 4       False    False  \n",
              " ...       ...      ...  \n",
              " 1594    False    False  \n",
              " 1595    False    False  \n",
              " 1596    False    False  \n",
              " 1597    False    False  \n",
              " 1598    False    False  \n",
              " \n",
              " [1599 rows x 12 columns],\n",
              "       fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              " 0             False             False        False           False      False   \n",
              " 1             False             False        False           False      False   \n",
              " 2             False             False        False           False      False   \n",
              " 3             False             False        False           False      False   \n",
              " 4             False             False        False           False      False   \n",
              " ...             ...               ...          ...             ...        ...   \n",
              " 4893          False             False        False           False      False   \n",
              " 4894          False             False        False           False      False   \n",
              " 4895          False             False        False           False      False   \n",
              " 4896          False             False        False           False      False   \n",
              " 4897          False             False        False           False      False   \n",
              " \n",
              "       free sulfur dioxide  total sulfur dioxide  density     pH  sulphates  \\\n",
              " 0                   False                 False    False  False      False   \n",
              " 1                   False                 False    False  False      False   \n",
              " 2                   False                 False    False  False      False   \n",
              " 3                   False                 False    False  False      False   \n",
              " 4                   False                 False    False  False      False   \n",
              " ...                   ...                   ...      ...    ...        ...   \n",
              " 4893                False                 False    False  False      False   \n",
              " 4894                False                 False    False  False      False   \n",
              " 4895                False                 False    False  False      False   \n",
              " 4896                False                 False    False  False      False   \n",
              " 4897                False                 False    False  False      False   \n",
              " \n",
              "       alcohol  quality  \n",
              " 0       False    False  \n",
              " 1       False    False  \n",
              " 2       False    False  \n",
              " 3       False    False  \n",
              " 4       False    False  \n",
              " ...       ...      ...  \n",
              " 4893    False    False  \n",
              " 4894    False    False  \n",
              " 4895    False    False  \n",
              " 4896    False    False  \n",
              " 4897    False    False  \n",
              " \n",
              " [4898 rows x 12 columns])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1mUrPXu8B9HR"
      },
      "source": [
        "Red Wine:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zDKfnRCo6jYn"
      },
      "outputs": [],
      "source": [
        "\n",
        "red_df[\"is_red\"] = 1\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "White Wine"
      ],
      "metadata": {
        "id": "dacm6Zxl8518"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UpR2O6JG9kLu"
      },
      "outputs": [],
      "source": [
        "white_df[\"is_red\"] = 0 \n",
        "#white_df.isna()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "red_df.info(),white_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sEqWl4Oh8jrF",
        "outputId": "b336fa32-2776-41d2-af3c-e5f255e340fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1599 entries, 0 to 1598\n",
            "Data columns (total 13 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         1599 non-null   float64\n",
            " 1   volatile acidity      1599 non-null   float64\n",
            " 2   citric acid           1599 non-null   float64\n",
            " 3   residual sugar        1599 non-null   float64\n",
            " 4   chlorides             1599 non-null   float64\n",
            " 5   free sulfur dioxide   1599 non-null   float64\n",
            " 6   total sulfur dioxide  1599 non-null   float64\n",
            " 7   density               1599 non-null   float64\n",
            " 8   pH                    1599 non-null   float64\n",
            " 9   sulphates             1599 non-null   float64\n",
            " 10  alcohol               1599 non-null   float64\n",
            " 11  quality               1599 non-null   int64  \n",
            " 12  is_red                1599 non-null   int64  \n",
            "dtypes: float64(11), int64(2)\n",
            "memory usage: 162.5 KB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4898 entries, 0 to 4897\n",
            "Data columns (total 13 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         4898 non-null   float64\n",
            " 1   volatile acidity      4898 non-null   float64\n",
            " 2   citric acid           4898 non-null   float64\n",
            " 3   residual sugar        4898 non-null   float64\n",
            " 4   chlorides             4898 non-null   float64\n",
            " 5   free sulfur dioxide   4898 non-null   float64\n",
            " 6   total sulfur dioxide  4898 non-null   float64\n",
            " 7   density               4898 non-null   float64\n",
            " 8   pH                    4898 non-null   float64\n",
            " 9   sulphates             4898 non-null   float64\n",
            " 10  alcohol               4898 non-null   float64\n",
            " 11  quality               4898 non-null   int64  \n",
            " 12  is_red                4898 non-null   int64  \n",
            "dtypes: float64(11), int64(2)\n",
            "memory usage: 497.6 KB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(None, None)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SsZujOGRWamR"
      },
      "source": [
        "### New dataset with white and red:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0eWJSyDVb7BQ"
      },
      "outputs": [],
      "source": [
        "df = pd.concat([red_df, white_df], ignore_index=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop_duplicates(keep='first')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "LCSwGY6m9SSz",
        "outputId": "4ec00453-62bd-4a7f-be4e-2dd2210daea6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.4              0.70         0.00             1.9      0.076   \n",
              "1               7.8              0.88         0.00             2.6      0.098   \n",
              "2               7.8              0.76         0.04             2.3      0.092   \n",
              "3              11.2              0.28         0.56             1.9      0.075   \n",
              "5               7.4              0.66         0.00             1.8      0.075   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "6492            6.2              0.21         0.29             1.6      0.039   \n",
              "6493            6.6              0.32         0.36             8.0      0.047   \n",
              "6494            6.5              0.24         0.19             1.2      0.041   \n",
              "6495            5.5              0.29         0.30             1.1      0.022   \n",
              "6496            6.0              0.21         0.38             0.8      0.020   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
              "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
              "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
              "5                    13.0                  40.0  0.99780  3.51       0.56   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "6492                 24.0                  92.0  0.99114  3.27       0.50   \n",
              "6493                 57.0                 168.0  0.99490  3.15       0.46   \n",
              "6494                 30.0                 111.0  0.99254  2.99       0.46   \n",
              "6495                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "6496                 22.0                  98.0  0.98941  3.26       0.32   \n",
              "\n",
              "      alcohol  quality  is_red  \n",
              "0         9.4        5       1  \n",
              "1         9.8        5       1  \n",
              "2         9.8        5       1  \n",
              "3         9.8        6       1  \n",
              "5         9.4        5       1  \n",
              "...       ...      ...     ...  \n",
              "6492     11.2        6       0  \n",
              "6493      9.6        5       0  \n",
              "6494      9.4        6       0  \n",
              "6495     12.8        7       0  \n",
              "6496     11.8        6       0  \n",
              "\n",
              "[5320 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7bc95826-cd57-44da-866e-d1d04b57b624\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "      <th>is_red</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0.075</td>\n",
              "      <td>13.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6492</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.039</td>\n",
              "      <td>24.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.99114</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.50</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6493</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.36</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.047</td>\n",
              "      <td>57.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.6</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6494</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.19</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.041</td>\n",
              "      <td>30.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.99254</td>\n",
              "      <td>2.99</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6495</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.8</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6496</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.020</td>\n",
              "      <td>22.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.98941</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.32</td>\n",
              "      <td>11.8</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5320 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bc95826-cd57-44da-866e-d1d04b57b624')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7bc95826-cd57-44da-866e-d1d04b57b624 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7bc95826-cd57-44da-866e-d1d04b57b624');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mLjN9Q5WhJR",
        "outputId": "8b393884-e56f-4a45-b990-3f27e9e69fac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6497 entries, 0 to 6496\n",
            "Data columns (total 13 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         6497 non-null   float64\n",
            " 1   volatile acidity      6497 non-null   float64\n",
            " 2   citric acid           6497 non-null   float64\n",
            " 3   residual sugar        6497 non-null   float64\n",
            " 4   chlorides             6497 non-null   float64\n",
            " 5   free sulfur dioxide   6497 non-null   float64\n",
            " 6   total sulfur dioxide  6497 non-null   float64\n",
            " 7   density               6497 non-null   float64\n",
            " 8   pH                    6497 non-null   float64\n",
            " 9   sulphates             6497 non-null   float64\n",
            " 10  alcohol               6497 non-null   float64\n",
            " 11  quality               6497 non-null   int64  \n",
            " 12  is_red                6497 non-null   int64  \n",
            "dtypes: float64(11), int64(2)\n",
            "memory usage: 660.0 KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AwS1Bdj2rZjh"
      },
      "outputs": [],
      "source": [
        "df = df.reindex(columns = [col for col in df.columns if col != 'quality'] + ['quality'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "0RrcLHa0rg-S",
        "outputId": "41438b91-9b63-4d4f-dfb8-d8bdcc6644fc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.4              0.70         0.00             1.9      0.076   \n",
              "1               7.8              0.88         0.00             2.6      0.098   \n",
              "2               7.8              0.76         0.04             2.3      0.092   \n",
              "3              11.2              0.28         0.56             1.9      0.075   \n",
              "4               7.4              0.70         0.00             1.9      0.076   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "6492            6.2              0.21         0.29             1.6      0.039   \n",
              "6493            6.6              0.32         0.36             8.0      0.047   \n",
              "6494            6.5              0.24         0.19             1.2      0.041   \n",
              "6495            5.5              0.29         0.30             1.1      0.022   \n",
              "6496            6.0              0.21         0.38             0.8      0.020   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
              "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
              "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
              "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "6492                 24.0                  92.0  0.99114  3.27       0.50   \n",
              "6493                 57.0                 168.0  0.99490  3.15       0.46   \n",
              "6494                 30.0                 111.0  0.99254  2.99       0.46   \n",
              "6495                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "6496                 22.0                  98.0  0.98941  3.26       0.32   \n",
              "\n",
              "      alcohol  is_red  quality  \n",
              "0         9.4       1        5  \n",
              "1         9.8       1        5  \n",
              "2         9.8       1        5  \n",
              "3         9.8       1        6  \n",
              "4         9.4       1        5  \n",
              "...       ...     ...      ...  \n",
              "6492     11.2       0        6  \n",
              "6493      9.6       0        5  \n",
              "6494      9.4       0        6  \n",
              "6495     12.8       0        7  \n",
              "6496     11.8       0        6  \n",
              "\n",
              "[6497 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49342298-ee41-4bad-9308-7d3fe25a6532\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>is_red</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6492</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.039</td>\n",
              "      <td>24.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.99114</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.50</td>\n",
              "      <td>11.2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6493</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.36</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.047</td>\n",
              "      <td>57.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.6</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6494</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.19</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.041</td>\n",
              "      <td>30.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.99254</td>\n",
              "      <td>2.99</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6495</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.8</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6496</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.020</td>\n",
              "      <td>22.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.98941</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.32</td>\n",
              "      <td>11.8</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6497 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49342298-ee41-4bad-9308-7d3fe25a6532')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-49342298-ee41-4bad-9308-7d3fe25a6532 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-49342298-ee41-4bad-9308-7d3fe25a6532');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.is_red.value_counts().plot(kind='bar', title='Count Wine Type')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "hHARy0fBtaAH",
        "outputId": "2a50481d-4ba1-41ec-a931-8d1e8b4a218b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f40bc4bfa50>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Benchmarks"
      ],
      "metadata": {
        "id": "wR-YvO0BTAP2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Regression"
      ],
      "metadata": {
        "id": "jL6oeq2kO3ZZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df.corr()\n",
        "fig, ax = plt.subplots(figsize = (17,17))\n",
        "g= sns.heatmap(corr,ax=ax, annot= True)\n",
        "ax.set_title('Correlation between variables')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qOFDfDWYMPpr",
        "outputId": "2aaccca9-5488-47ad-ece2-ad92f5d83449"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Correlation between variables')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1224x1224 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Code taken and corrected from: https://medium.datadriveninvestor.com/regression-from-scratch-wine-quality-prediction-d61195cb91c8"
      ],
      "metadata": {
        "id": "qzbOA_veVmQn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "correlations = df.corr()['quality'].drop('quality')\n",
        "print(correlations)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7oaTZJK5QDHV",
        "outputId": "d298f970-fa3f-47d9-ab6d-51d0901726d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fixed acidity          -0.076743\n",
            "volatile acidity       -0.265699\n",
            "citric acid             0.085532\n",
            "residual sugar         -0.036980\n",
            "chlorides              -0.200666\n",
            "free sulfur dioxide     0.055463\n",
            "total sulfur dioxide   -0.041385\n",
            "density                -0.305858\n",
            "pH                      0.019506\n",
            "sulphates               0.038485\n",
            "alcohol                 0.444319\n",
            "is_red                 -0.119323\n",
            "Name: quality, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_features(correlation_threshold):\n",
        "  abs_corrs = correlations.abs()\n",
        "  high_correlations = abs_corrs[abs_corrs > correlation_threshold].index.values.tolist()\n",
        "  return high_correlations"
      ],
      "metadata": {
        "id": "6kac8dxpNS-w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# taking features with correlation more than 0.05 as input x and quality as target variable y \n",
        "features = get_features(0.05)\n",
        "print(features)\n",
        "x = df[features]\n",
        "y = df['quality']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bh2o54c3P5cV",
        "outputId": "5868ea16-08a3-4465-ba6c-c56e5b96e953"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['fixed acidity', 'volatile acidity', 'citric acid', 'chlorides', 'free sulfur dioxide', 'density', 'alcohol', 'is_red']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=3)"
      ],
      "metadata": {
        "id": "QmjtdzVVP99q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting linear regression to training data\n",
        "regressor = LinearRegression()\n",
        "regressor.fit(x_train,y_train)\n",
        "  \n",
        "# this gives the coefficients of the 10 features selected above.  print(regressor.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ly_375-NRC4z",
        "outputId": "4b488bc6-e34f-4b98-977f-06af46894483"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_pred = regressor.predict(x_train)\n",
        "print(train_pred)\n",
        "test_pred = regressor.predict(x_test) \n",
        "print(test_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yCMNCrEbRgc8",
        "outputId": "e305e3e7-fba1-44d7-a7ac-9ff085f88fd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6.70734947 6.12317802 5.25582553 ... 6.24093576 5.03807767 5.62080871]\n",
            "[5.99487943 5.21591052 4.93926228 ... 6.63016338 6.02225725 6.24289764]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "h6lU6WphRiUO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# calculating rmse\n",
        "train_rmse = mean_squared_error(train_pred, y_train) ** 0.5\n",
        "print(train_rmse)\n",
        "test_rmse = mean_squared_error(test_pred, y_test) ** 0.5\n",
        "print(test_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "udKl50hQRDN-",
        "outputId": "03bc0031-3cd3-4781-cb6f-528eee125103"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.74425873667514\n",
            "0.7394743423497988\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# rounding off the predicted values for test set\n",
        "predicted_data = np.round_(test_pred)\n",
        "print(predicted_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pqNv9GMMRNZQ",
        "outputId": "0eab24d8-63bb-46cb-e64f-0a386f7a9c41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6. 5. 5. ... 7. 6. 6.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_rmse = mean_squared_error(test_pred, y_test) ** 0.5\n",
        "print(test_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OXwcNlwzSLOB",
        "outputId": "a637fea6-b10f-47d8-fa7b-c43041a8b7da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7394743423497988\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_data = np.round_(test_pred)\n",
        "print(predicted_data)\n",
        "print('Mean Absolute Error on Test Data:', metrics.mean_absolute_error(y_test, test_pred))\n",
        "print('Mean Squared Error on Test Data:', metrics.mean_squared_error(y_test, test_pred))\n",
        "print('Root Mean Squared Error on Test Data:', np.sqrt(metrics.mean_squared_error(y_test, test_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wRW4mTBHSLGv",
        "outputId": "d5d91986-8665-49de-964f-ceac25288c25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6. 5. 5. ... 7. 6. 6.]\n",
            "Mean Absolute Error on Test Data: 0.5717044133963589\n",
            "Mean Squared Error on Test Data: 0.5468223029936675\n",
            "Root Mean Squared Error on Test Data: 0.7394743423497988\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Value to beat on predictinig Wine Quality: 74%**"
      ],
      "metadata": {
        "id": "UO99xvleSl0I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "2Eq3iZYGUN-f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Classification\n"
      ],
      "metadata": {
        "id": "Ok37f6IwMN-1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Code taken from: https://practicaldatascience.co.uk/machine-learning/how-to-create-a-classification-model-using-xgboost"
      ],
      "metadata": {
        "id": "MVUleRA-VUHd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "mkYA4zzt2fKN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(['is_red'],axis=1)\n",
        "y = df.is_red"
      ],
      "metadata": {
        "id": "W2-MGPTwMjWQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)"
      ],
      "metadata": {
        "id": "jBP2QDGmMSg-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')"
      ],
      "metadata": {
        "id": "bsTE6ddJM7ca"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x3glTZYjM-at",
        "outputId": "67abd19c-ce89-446d-9161-f92e6eef2dfc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(eval_metric='mlogloss', use_label_encoder=False)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
        "              colsample_bynode=1, colsample_bytree=1, eval_metric='mlogloss',\n",
        "              gamma=0, gpu_id=-1, importance_type='gain',\n",
        "              interaction_constraints='', learning_rate=0.300000012,\n",
        "              max_delta_step=0, max_depth=6, min_child_weight=1,\n",
        "              monotone_constraints='()', n_estimators=100, n_jobs=16,\n",
        "              num_parallel_tree=1, objective='multi:softprob', random_state=0,\n",
        "              reg_alpha=0, reg_lambda=1, scale_pos_weight=None, subsample=1,\n",
        "              tree_method='exact', use_label_encoder=False,\n",
        "              validate_parameters=1, verbosity=None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x5X0Tl_MNAVI",
        "outputId": "213516bb-35d8-461d-de05-387638c6bcac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(eval_metric='mlogloss', gpu_id=-1, interaction_constraints='',\n",
              "              learning_rate=0.300000012, max_depth=6, monotone_constraints='()',\n",
              "              n_jobs=16, num_parallel_tree=1, objective='multi:softprob',\n",
              "              scale_pos_weight=None, tree_method='exact',\n",
              "              use_label_encoder=False, validate_parameters=1, verbosity=None)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "1x1XzttANEx3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print('The classification accuracy for is_red and not is_red is:', accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrAftMhFNPJy",
        "outputId": "92c5978e-77ab-4265-82be-2ad20006f9ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The classification accuracy for is_red and not is_red is: 0.9923076923076923\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "t5PzFgFMA0mh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Value to beat for classification of Red or White Wine: 99% accuracy**"
      ],
      "metadata": {
        "id": "XpNzcYHdSxBl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Keras API"
      ],
      "metadata": {
        "id": "tvW9VdbUUQaf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "code taken from: https://colab.research.google.com/drive/1XX6GidW1AqY5gBbdXsoRxQ84xnVcg6a9?usp=sharing#scrollTo=I6t9z0Tf-sen\n",
        "and\n",
        "https://machinelearningmastery.com/neural-network-models-for-combined-classification-and-regression/\n"
      ],
      "metadata": {
        "id": "ZCqNwTG0VwOM"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n3k0vqSsp84t"
      },
      "source": [
        "### Train Test Split \n",
        "\n",
        "We split the datasets into training, test and validation datasets.\n",
        "- The data frame should be split 80:20 into `train` and `test` sets.\n",
        "- The resulting `train` should then be split 80:20 into `train` and `val` sets.\n",
        "- The `train_test_split` parameter `test_size` takes a float value that ranges between 0. and 1, and represents the proportion of the dataset that is allocated to the test set.  The rest of the data is allocated to the training set."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": false,
        "id": "PAVIf2-fgRVY",
        "nbgrader": {
          "cell_type": "code",
          "checksum": "7f5738f4fb51d65adc9a8acbdf2b9970",
          "grade": false,
          "grade_id": "cell-91946cadf745206b",
          "locked": false,
          "schema_version": 3,
          "solution": true,
          "task": false
        }
      },
      "source": [
        "# split df into 80:20 train and test sets\n",
        "train, test = train_test_split(df, test_size=0.2, random_state = 1)\n",
        "                               \n",
        "# split train into 80:20 train and val sets\n",
        "train, val = train_test_split(train, test_size=0.2, random_state = 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RwTNu4KFqG-K"
      },
      "source": [
        "Training data stats"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y_afyhhHM6WQ"
      },
      "source": [
        "train_stats = train.describe()\n",
        "train_stats.pop('is_red')\n",
        "train_stats.pop('quality')\n",
        "train_stats = train_stats.transpose()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n_gAtPjZ0otF",
        "outputId": "e364f233-be03-4772-bd28-fea0a40d9350"
      },
      "source": [
        "train_stats"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       count        mean        std      min       25%  \\\n",
              "fixed acidity         4157.0    7.226702   1.302644  3.80000   6.40000   \n",
              "volatile acidity      4157.0    0.342403   0.166465  0.08000   0.23000   \n",
              "citric acid           4157.0    0.316481   0.144655  0.00000   0.24000   \n",
              "residual sugar        4157.0    5.417272   4.739218  0.60000   1.80000   \n",
              "chlorides             4157.0    0.056358   0.035460  0.01200   0.03800   \n",
              "free sulfur dioxide   4157.0   30.585518  17.920188  1.00000  17.00000   \n",
              "total sulfur dioxide  4157.0  115.221915  56.581139  6.00000  77.00000   \n",
              "density               4157.0    0.994710   0.003004  0.98711   0.99238   \n",
              "pH                    4157.0    3.218446   0.159392  2.74000   3.11000   \n",
              "sulphates             4157.0    0.533103   0.151130  0.23000   0.43000   \n",
              "alcohol               4157.0   10.494546   1.188278  8.00000   9.50000   \n",
              "\n",
              "                           50%        75%        max  \n",
              "fixed acidity           7.0000    7.70000   15.90000  \n",
              "volatile acidity        0.3000    0.41000    1.33000  \n",
              "citric acid             0.3100    0.39000    1.23000  \n",
              "residual sugar          3.0000    8.10000   65.80000  \n",
              "chlorides               0.0480    0.06600    0.61100  \n",
              "free sulfur dioxide    29.0000   41.00000  289.00000  \n",
              "total sulfur dioxide  118.0000  155.00000  440.00000  \n",
              "density                 0.9949    0.99699    1.03898  \n",
              "pH                      3.2100    3.32000    4.01000  \n",
              "sulphates               0.5100    0.60000    2.00000  \n",
              "alcohol                10.3000   11.30000   14.90000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6da5aa98-1490-4bae-b18e-a82d0630e342\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>fixed acidity</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>7.226702</td>\n",
              "      <td>1.302644</td>\n",
              "      <td>3.80000</td>\n",
              "      <td>6.40000</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>7.70000</td>\n",
              "      <td>15.90000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volatile acidity</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>0.342403</td>\n",
              "      <td>0.166465</td>\n",
              "      <td>0.08000</td>\n",
              "      <td>0.23000</td>\n",
              "      <td>0.3000</td>\n",
              "      <td>0.41000</td>\n",
              "      <td>1.33000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>citric acid</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>0.316481</td>\n",
              "      <td>0.144655</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.24000</td>\n",
              "      <td>0.3100</td>\n",
              "      <td>0.39000</td>\n",
              "      <td>1.23000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>residual sugar</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>5.417272</td>\n",
              "      <td>4.739218</td>\n",
              "      <td>0.60000</td>\n",
              "      <td>1.80000</td>\n",
              "      <td>3.0000</td>\n",
              "      <td>8.10000</td>\n",
              "      <td>65.80000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chlorides</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>0.056358</td>\n",
              "      <td>0.035460</td>\n",
              "      <td>0.01200</td>\n",
              "      <td>0.03800</td>\n",
              "      <td>0.0480</td>\n",
              "      <td>0.06600</td>\n",
              "      <td>0.61100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>30.585518</td>\n",
              "      <td>17.920188</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>17.00000</td>\n",
              "      <td>29.0000</td>\n",
              "      <td>41.00000</td>\n",
              "      <td>289.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>115.221915</td>\n",
              "      <td>56.581139</td>\n",
              "      <td>6.00000</td>\n",
              "      <td>77.00000</td>\n",
              "      <td>118.0000</td>\n",
              "      <td>155.00000</td>\n",
              "      <td>440.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>density</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>0.994710</td>\n",
              "      <td>0.003004</td>\n",
              "      <td>0.98711</td>\n",
              "      <td>0.99238</td>\n",
              "      <td>0.9949</td>\n",
              "      <td>0.99699</td>\n",
              "      <td>1.03898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pH</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>3.218446</td>\n",
              "      <td>0.159392</td>\n",
              "      <td>2.74000</td>\n",
              "      <td>3.11000</td>\n",
              "      <td>3.2100</td>\n",
              "      <td>3.32000</td>\n",
              "      <td>4.01000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sulphates</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>0.533103</td>\n",
              "      <td>0.151130</td>\n",
              "      <td>0.23000</td>\n",
              "      <td>0.43000</td>\n",
              "      <td>0.5100</td>\n",
              "      <td>0.60000</td>\n",
              "      <td>2.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alcohol</th>\n",
              "      <td>4157.0</td>\n",
              "      <td>10.494546</td>\n",
              "      <td>1.188278</td>\n",
              "      <td>8.00000</td>\n",
              "      <td>9.50000</td>\n",
              "      <td>10.3000</td>\n",
              "      <td>11.30000</td>\n",
              "      <td>14.90000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6da5aa98-1490-4bae-b18e-a82d0630e342')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6da5aa98-1490-4bae-b18e-a82d0630e342 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6da5aa98-1490-4bae-b18e-a82d0630e342');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Saving the stats to be reused later in normalising the feature sets"
      ],
      "metadata": {
        "id": "W6ZADHx4ahQ3"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cQa-e7L7IPhG"
      },
      "source": [
        "train_stats.to_pickle(\"train_stats\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UoDqf0Kj5d8g",
        "outputId": "32555945-a8dc-448b-8150-2963827b942d"
      },
      "source": [
        "train_stats['mean'], train_stats['std']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(fixed acidity             7.226702\n",
              " volatile acidity          0.342403\n",
              " citric acid               0.316481\n",
              " residual sugar            5.417272\n",
              " chlorides                 0.056358\n",
              " free sulfur dioxide      30.585518\n",
              " total sulfur dioxide    115.221915\n",
              " density                   0.994710\n",
              " pH                        3.218446\n",
              " sulphates                 0.533103\n",
              " alcohol                  10.494546\n",
              " Name: mean, dtype: float64, fixed acidity            1.302644\n",
              " volatile acidity         0.166465\n",
              " citric acid              0.144655\n",
              " residual sugar           4.739218\n",
              " chlorides                0.035460\n",
              " free sulfur dioxide     17.920188\n",
              " total sulfur dioxide    56.581139\n",
              " density                  0.003004\n",
              " pH                       0.159392\n",
              " sulphates                0.151130\n",
              " alcohol                  1.188278\n",
              " Name: std, dtype: float64)"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prepping the labels"
      ],
      "metadata": {
        "id": "4EcrfMoWawLh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def format_output(data):\n",
        "    is_red = data.pop('is_red')\n",
        "    is_red = np.array(is_red)\n",
        "    quality = data.pop('quality')\n",
        "    quality = np.array(quality)\n",
        "    return (quality, is_red)\n",
        "    "
      ],
      "metadata": {
        "id": "_JO93C27ayLG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# format the output of the train set\n",
        "train_Y = format_output(train)\n",
        "\n",
        "# format the output of the val set\n",
        "val_Y = format_output(val)\n",
        "    \n",
        "# format the output of the test set\n",
        "test_Y = format_output(test)"
      ],
      "metadata": {
        "id": "4E-mMLlPa1D5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_Y[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n4JXzZ4u6vvY",
        "outputId": "0624182f-4901-46ea-ecf5-c6d11ad4f87b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 6, 5, ..., 5, 5, 6])"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hEdbrruAsN1D"
      },
      "source": [
        "Normalize the data \n",
        "\n",
        "We can normalize the data, x, using the formula:\n",
        "$$x_{norm} = \\frac{x - \\mu}{\\sigma}$$\n",
        "- The `norm` function is defined below.\n",
        "- We apply the `norm` function to normalize the dataframes that contains the feature columns of `train`, `val` and `test` sets."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WWiZPAHCLjUs"
      },
      "source": [
        "def norm(x):\n",
        "    return (x - train_stats['mean']) / train_stats['std']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "deletable": false,
        "id": "JEaOi2I2Lk69",
        "nbgrader": {
          "cell_type": "code",
          "checksum": "6bc0cdcb563d192f271067aa3373ff32",
          "grade": false,
          "grade_id": "cell-d8416d975c371095",
          "locked": false,
          "schema_version": 3,
          "solution": true,
          "task": false
        },
        "outputId": "5b95b74c-f654-43a7-d45b-fa1da77212d0"
      },
      "source": [
        "\n",
        "# normalize the train set\n",
        "norm_train_X = norm(train)\n",
        "    \n",
        "# normalize the val set\n",
        "norm_val_X = norm(val)\n",
        "    \n",
        "# normalize the test set\n",
        "norm_test_X = norm(test) \n",
        "print(norm_train_X.shape)\n",
        "print(norm_val_X.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4157, 11)\n",
            "(1040, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_Y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hqxUyIZ2a3zD",
        "outputId": "65625c2c-4535-4564-9ebe-e62dfd1150cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([5, 6, 5, ..., 5, 5, 6]), array([0, 1, 1, ..., 1, 0, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hzykDwQhsaPO"
      },
      "source": [
        "## Define the Model \n",
        "\n",
        "Define the model using the functional API. The base model will be 2 `Dense` layers of 20 and 10 neurons each, and have the `'relu'` activation."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n_features = norm_train_X.shape[1]"
      ],
      "metadata": {
        "id": "gGjkQYp9vGSn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def base_model(inputs):\n",
        "\n",
        "  x = Dense(100, activation='relu')(inputs)\n",
        "  x = Dense(100, activation='relu')(x)\n",
        "  return x\n"
      ],
      "metadata": {
        "id": "Ssx6s2o02y1F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xem_fcVws6Kz"
      },
      "source": [
        "## Define output layers of the model \n",
        "\n",
        "We add output layers to the base model. \n",
        "- The model will need two outputs.\n",
        "\n",
        "One output layer will predict wine quality, which is a numeric value.\n",
        "- Define a `Dense` layer with 1 neuron.\n",
        "- Since this is a regression output, the activation can be left as its default value `None`.\n",
        "\n",
        "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
        "- Define a `Dense` layer with 1 neuron.\n",
        "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
        "\n",
        "Define the `Model`\n",
        "- Define the `Model` object, and set the following parameters:\n",
        "  - `inputs`: pass in the inputs to the model as a list.\n",
        "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
        "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qRerJWZA8GST"
      },
      "source": [
        "# Define output layers of the model \n",
        "\n",
        "We add output layers to the base model. \n",
        "- The model will need two outputs.\n",
        "\n",
        "One output layer will predict wine quality, which is a numeric value.\n",
        "- Define a `Dense` layer with 1 neuron.\n",
        "- Since this is a regression output, the activation can be left as its default value `None`.\n",
        "\n",
        "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
        "- Define a `Dense` layer with 1 neuron.\n",
        "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
        "\n",
        "Define the `Model`\n",
        "- Define the `Model` object, and set the following parameters:\n",
        "  - `inputs`: pass in the inputs to the model as a list.\n",
        "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
        "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": false,
        "id": "n5UGF8PMVLPt",
        "nbgrader": {
          "cell_type": "code",
          "checksum": "76d35b90d20cdcbb22986cd8211057de",
          "grade": false,
          "grade_id": "cell-19e285f482f021fb",
          "locked": false,
          "schema_version": 3,
          "solution": true,
          "task": false
        }
      },
      "source": [
        "\n",
        "def final_model(inputs):\n",
        "    \n",
        "    # get the base model\n",
        "    x = base_model(inputs)\n",
        "\n",
        "    # connect the output Dense layer for regression\n",
        "    wine_quality = Dense(units='1', name='wine_quality')(x)\n",
        "\n",
        "    # connect the output Dense layer for classification. this will use a sigmoid activation.\n",
        "    wine_type = Dense(units='1', activation= 'sigmoid', name='wine_type')(x)\n",
        "\n",
        "    # define the model using the input and output layers\n",
        "    model = Model(inputs= inputs, outputs = [wine_quality, wine_type])\n",
        "\n",
        "    return model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5R0BMTsltZyu"
      },
      "source": [
        "## Compiling the Model\n",
        "\n",
        "We compile the model. When setting the loss parameter of `model.compile`, we are setting the loss for each of the two outputs (wine quality and wine type).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "deletable": false,
        "id": "LK11duUbUjmh",
        "nbgrader": {
          "cell_type": "code",
          "checksum": "22f45067ca69eb2ccadb43874dbcc27b",
          "grade": false,
          "grade_id": "cell-81afdc4dcca51d5e",
          "locked": false,
          "schema_version": 3,
          "solution": true,
          "task": false
        },
        "outputId": "8c964923-d145-409a-edf9-5e107a34bf50"
      },
      "source": [
        "\n",
        "inputs = tf.keras.layers.Input(shape=(11,))\n",
        "#takes the 11 features from the normalised X set\n",
        "rms = tf.keras.optimizers.RMSprop(lr=0.0001)\n",
        "model = final_model(inputs)\n",
        "\n",
        "model.compile(optimizer=rms, \n",
        "              loss = {'wine_type' : 'binary_crossentropy',\n",
        "                      'wine_quality' : 'mse'\n",
        "                     },\n",
        "              metrics = {'wine_type' : 'accuracy',\n",
        "                         'wine_quality': tf.keras.metrics.RootMeanSquaredError(), \n",
        "                       }\n",
        "             )\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(RMSprop, self).__init__(name, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.get_config()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LPyCEGSvW2RQ",
        "outputId": "41ce0ed3-22ec-4826-803a-066d918ceda9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'input_layers': [['input_1', 0, 0]],\n",
              " 'layers': [{'class_name': 'InputLayer',\n",
              "   'config': {'batch_input_shape': (None, 11),\n",
              "    'dtype': 'float32',\n",
              "    'name': 'input_1',\n",
              "    'ragged': False,\n",
              "    'sparse': False},\n",
              "   'inbound_nodes': [],\n",
              "   'name': 'input_1'},\n",
              "  {'class_name': 'Dense',\n",
              "   'config': {'activation': 'relu',\n",
              "    'activity_regularizer': None,\n",
              "    'bias_constraint': None,\n",
              "    'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n",
              "    'bias_regularizer': None,\n",
              "    'dtype': 'float32',\n",
              "    'kernel_constraint': None,\n",
              "    'kernel_initializer': {'class_name': 'GlorotUniform',\n",
              "     'config': {'seed': None}},\n",
              "    'kernel_regularizer': None,\n",
              "    'name': 'dense',\n",
              "    'trainable': True,\n",
              "    'units': 100,\n",
              "    'use_bias': True},\n",
              "   'inbound_nodes': [[['input_1', 0, 0, {}]]],\n",
              "   'name': 'dense'},\n",
              "  {'class_name': 'Dense',\n",
              "   'config': {'activation': 'relu',\n",
              "    'activity_regularizer': None,\n",
              "    'bias_constraint': None,\n",
              "    'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n",
              "    'bias_regularizer': None,\n",
              "    'dtype': 'float32',\n",
              "    'kernel_constraint': None,\n",
              "    'kernel_initializer': {'class_name': 'GlorotUniform',\n",
              "     'config': {'seed': None}},\n",
              "    'kernel_regularizer': None,\n",
              "    'name': 'dense_1',\n",
              "    'trainable': True,\n",
              "    'units': 100,\n",
              "    'use_bias': True},\n",
              "   'inbound_nodes': [[['dense', 0, 0, {}]]],\n",
              "   'name': 'dense_1'},\n",
              "  {'class_name': 'Dense',\n",
              "   'config': {'activation': 'linear',\n",
              "    'activity_regularizer': None,\n",
              "    'bias_constraint': None,\n",
              "    'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n",
              "    'bias_regularizer': None,\n",
              "    'dtype': 'float32',\n",
              "    'kernel_constraint': None,\n",
              "    'kernel_initializer': {'class_name': 'GlorotUniform',\n",
              "     'config': {'seed': None}},\n",
              "    'kernel_regularizer': None,\n",
              "    'name': 'wine_quality',\n",
              "    'trainable': True,\n",
              "    'units': 1,\n",
              "    'use_bias': True},\n",
              "   'inbound_nodes': [[['dense_1', 0, 0, {}]]],\n",
              "   'name': 'wine_quality'},\n",
              "  {'class_name': 'Dense',\n",
              "   'config': {'activation': 'sigmoid',\n",
              "    'activity_regularizer': None,\n",
              "    'bias_constraint': None,\n",
              "    'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n",
              "    'bias_regularizer': None,\n",
              "    'dtype': 'float32',\n",
              "    'kernel_constraint': None,\n",
              "    'kernel_initializer': {'class_name': 'GlorotUniform',\n",
              "     'config': {'seed': None}},\n",
              "    'kernel_regularizer': None,\n",
              "    'name': 'wine_type',\n",
              "    'trainable': True,\n",
              "    'units': 1,\n",
              "    'use_bias': True},\n",
              "   'inbound_nodes': [[['dense_1', 0, 0, {}]]],\n",
              "   'name': 'wine_type'}],\n",
              " 'name': 'model',\n",
              " 'output_layers': [['wine_quality', 0, 0], ['wine_type', 0, 0]]}"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "hzrf5pCDXDyi",
        "outputId": "cc6baf87-0101-4a28-9234-a32b42e8b19f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "90MpAMpWuKm-"
      },
      "source": [
        "## Training the Model\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "deletable": false,
        "id": "_eiZkle4XwiY",
        "nbgrader": {
          "cell_type": "code",
          "checksum": "2ca7664be03bfd6fd3651ae44d17b793",
          "grade": false,
          "grade_id": "cell-0bb56262896f6680",
          "locked": false,
          "schema_version": 3,
          "solution": true,
          "task": false
        },
        "outputId": "901f057c-1032-4620-ba7d-a3973944a478"
      },
      "source": [
        "history = model.fit(norm_train_X, train_Y, \n",
        "                    epochs = 200, validation_data=(norm_val_X, val_Y))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/200\n",
            "130/130 [==============================] - 2s 5ms/step - loss: 25.0921 - wine_quality_loss: 24.3968 - wine_type_loss: 0.6953 - wine_quality_root_mean_squared_error: 4.9393 - wine_type_accuracy: 0.6846 - val_loss: 17.0348 - val_wine_quality_loss: 16.3620 - val_wine_type_loss: 0.6728 - val_wine_quality_root_mean_squared_error: 4.0450 - val_wine_type_accuracy: 0.7413\n",
            "Epoch 2/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 10.2688 - wine_quality_loss: 9.6271 - wine_type_loss: 0.6417 - wine_quality_root_mean_squared_error: 3.1028 - wine_type_accuracy: 0.7436 - val_loss: 5.4099 - val_wine_quality_loss: 4.8243 - val_wine_type_loss: 0.5855 - val_wine_quality_root_mean_squared_error: 2.1964 - val_wine_type_accuracy: 0.7606\n",
            "Epoch 3/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 3.7395 - wine_quality_loss: 3.2072 - wine_type_loss: 0.5323 - wine_quality_root_mean_squared_error: 1.7909 - wine_type_accuracy: 0.7467 - val_loss: 3.0093 - val_wine_quality_loss: 2.5546 - val_wine_type_loss: 0.4546 - val_wine_quality_root_mean_squared_error: 1.5983 - val_wine_type_accuracy: 0.7606\n",
            "Epoch 4/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 2.7766 - wine_quality_loss: 2.3789 - wine_type_loss: 0.3976 - wine_quality_root_mean_squared_error: 1.5424 - wine_type_accuracy: 0.7847 - val_loss: 2.5205 - val_wine_quality_loss: 2.1945 - val_wine_type_loss: 0.3260 - val_wine_quality_root_mean_squared_error: 1.4814 - val_wine_type_accuracy: 0.8894\n",
            "Epoch 5/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 2.3550 - wine_quality_loss: 2.0727 - wine_type_loss: 0.2823 - wine_quality_root_mean_squared_error: 1.4397 - wine_type_accuracy: 0.9439 - val_loss: 2.2024 - val_wine_quality_loss: 1.9720 - val_wine_type_loss: 0.2304 - val_wine_quality_root_mean_squared_error: 1.4043 - val_wine_type_accuracy: 0.9731\n",
            "Epoch 6/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 2.0650 - wine_quality_loss: 1.8651 - wine_type_loss: 0.1999 - wine_quality_root_mean_squared_error: 1.3657 - wine_type_accuracy: 0.9824 - val_loss: 1.9773 - val_wine_quality_loss: 1.8110 - val_wine_type_loss: 0.1664 - val_wine_quality_root_mean_squared_error: 1.3457 - val_wine_type_accuracy: 0.9846\n",
            "Epoch 7/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.8559 - wine_quality_loss: 1.7096 - wine_type_loss: 0.1463 - wine_quality_root_mean_squared_error: 1.3075 - wine_type_accuracy: 0.9887 - val_loss: 1.7997 - val_wine_quality_loss: 1.6756 - val_wine_type_loss: 0.1241 - val_wine_quality_root_mean_squared_error: 1.2945 - val_wine_type_accuracy: 0.9856\n",
            "Epoch 8/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.6965 - wine_quality_loss: 1.5842 - wine_type_loss: 0.1123 - wine_quality_root_mean_squared_error: 1.2587 - wine_type_accuracy: 0.9909 - val_loss: 1.6576 - val_wine_quality_loss: 1.5615 - val_wine_type_loss: 0.0961 - val_wine_quality_root_mean_squared_error: 1.2496 - val_wine_type_accuracy: 0.9865\n",
            "Epoch 9/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.5569 - wine_quality_loss: 1.4673 - wine_type_loss: 0.0896 - wine_quality_root_mean_squared_error: 1.2113 - wine_type_accuracy: 0.9923 - val_loss: 1.5430 - val_wine_quality_loss: 1.4653 - val_wine_type_loss: 0.0777 - val_wine_quality_root_mean_squared_error: 1.2105 - val_wine_type_accuracy: 0.9865\n",
            "Epoch 10/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.4439 - wine_quality_loss: 1.3694 - wine_type_loss: 0.0745 - wine_quality_root_mean_squared_error: 1.1702 - wine_type_accuracy: 0.9928 - val_loss: 1.4507 - val_wine_quality_loss: 1.3857 - val_wine_type_loss: 0.0650 - val_wine_quality_root_mean_squared_error: 1.1772 - val_wine_type_accuracy: 0.9865\n",
            "Epoch 11/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.3498 - wine_quality_loss: 1.2855 - wine_type_loss: 0.0643 - wine_quality_root_mean_squared_error: 1.1338 - wine_type_accuracy: 0.9928 - val_loss: 1.3489 - val_wine_quality_loss: 1.2935 - val_wine_type_loss: 0.0554 - val_wine_quality_root_mean_squared_error: 1.1373 - val_wine_type_accuracy: 0.9875\n",
            "Epoch 12/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.2669 - wine_quality_loss: 1.2101 - wine_type_loss: 0.0569 - wine_quality_root_mean_squared_error: 1.1000 - wine_type_accuracy: 0.9928 - val_loss: 1.2724 - val_wine_quality_loss: 1.2237 - val_wine_type_loss: 0.0487 - val_wine_quality_root_mean_squared_error: 1.1062 - val_wine_type_accuracy: 0.9875\n",
            "Epoch 13/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.1861 - wine_quality_loss: 1.1348 - wine_type_loss: 0.0512 - wine_quality_root_mean_squared_error: 1.0653 - wine_type_accuracy: 0.9928 - val_loss: 1.1973 - val_wine_quality_loss: 1.1537 - val_wine_type_loss: 0.0436 - val_wine_quality_root_mean_squared_error: 1.0741 - val_wine_type_accuracy: 0.9875\n",
            "Epoch 14/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.1176 - wine_quality_loss: 1.0703 - wine_type_loss: 0.0473 - wine_quality_root_mean_squared_error: 1.0346 - wine_type_accuracy: 0.9935 - val_loss: 1.1460 - val_wine_quality_loss: 1.1062 - val_wine_type_loss: 0.0399 - val_wine_quality_root_mean_squared_error: 1.0517 - val_wine_type_accuracy: 0.9894\n",
            "Epoch 15/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.0600 - wine_quality_loss: 1.0157 - wine_type_loss: 0.0443 - wine_quality_root_mean_squared_error: 1.0078 - wine_type_accuracy: 0.9937 - val_loss: 1.0791 - val_wine_quality_loss: 1.0425 - val_wine_type_loss: 0.0366 - val_wine_quality_root_mean_squared_error: 1.0210 - val_wine_type_accuracy: 0.9885\n",
            "Epoch 16/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 1.0064 - wine_quality_loss: 0.9647 - wine_type_loss: 0.0417 - wine_quality_root_mean_squared_error: 0.9822 - wine_type_accuracy: 0.9940 - val_loss: 1.0277 - val_wine_quality_loss: 0.9935 - val_wine_type_loss: 0.0343 - val_wine_quality_root_mean_squared_error: 0.9967 - val_wine_type_accuracy: 0.9904\n",
            "Epoch 17/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.9558 - wine_quality_loss: 0.9161 - wine_type_loss: 0.0397 - wine_quality_root_mean_squared_error: 0.9571 - wine_type_accuracy: 0.9940 - val_loss: 0.9844 - val_wine_quality_loss: 0.9522 - val_wine_type_loss: 0.0322 - val_wine_quality_root_mean_squared_error: 0.9758 - val_wine_type_accuracy: 0.9904\n",
            "Epoch 18/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.9103 - wine_quality_loss: 0.8722 - wine_type_loss: 0.0381 - wine_quality_root_mean_squared_error: 0.9339 - wine_type_accuracy: 0.9942 - val_loss: 0.9405 - val_wine_quality_loss: 0.9100 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.9539 - val_wine_type_accuracy: 0.9923\n",
            "Epoch 19/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.8675 - wine_quality_loss: 0.8307 - wine_type_loss: 0.0368 - wine_quality_root_mean_squared_error: 0.9114 - wine_type_accuracy: 0.9942 - val_loss: 0.9028 - val_wine_quality_loss: 0.8736 - val_wine_type_loss: 0.0292 - val_wine_quality_root_mean_squared_error: 0.9347 - val_wine_type_accuracy: 0.9913\n",
            "Epoch 20/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.8340 - wine_quality_loss: 0.7984 - wine_type_loss: 0.0356 - wine_quality_root_mean_squared_error: 0.8935 - wine_type_accuracy: 0.9942 - val_loss: 0.8731 - val_wine_quality_loss: 0.8451 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.9193 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 21/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.7994 - wine_quality_loss: 0.7647 - wine_type_loss: 0.0346 - wine_quality_root_mean_squared_error: 0.8745 - wine_type_accuracy: 0.9942 - val_loss: 0.8345 - val_wine_quality_loss: 0.8076 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.8987 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 22/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.7672 - wine_quality_loss: 0.7334 - wine_type_loss: 0.0338 - wine_quality_root_mean_squared_error: 0.8564 - wine_type_accuracy: 0.9945 - val_loss: 0.8071 - val_wine_quality_loss: 0.7811 - val_wine_type_loss: 0.0260 - val_wine_quality_root_mean_squared_error: 0.8838 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 23/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.7393 - wine_quality_loss: 0.7063 - wine_type_loss: 0.0331 - wine_quality_root_mean_squared_error: 0.8404 - wine_type_accuracy: 0.9945 - val_loss: 0.7909 - val_wine_quality_loss: 0.7655 - val_wine_type_loss: 0.0254 - val_wine_quality_root_mean_squared_error: 0.8749 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 24/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.7136 - wine_quality_loss: 0.6813 - wine_type_loss: 0.0323 - wine_quality_root_mean_squared_error: 0.8254 - wine_type_accuracy: 0.9947 - val_loss: 0.7599 - val_wine_quality_loss: 0.7352 - val_wine_type_loss: 0.0247 - val_wine_quality_root_mean_squared_error: 0.8574 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 25/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6885 - wine_quality_loss: 0.6568 - wine_type_loss: 0.0317 - wine_quality_root_mean_squared_error: 0.8104 - wine_type_accuracy: 0.9947 - val_loss: 0.7372 - val_wine_quality_loss: 0.7130 - val_wine_type_loss: 0.0241 - val_wine_quality_root_mean_squared_error: 0.8444 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 26/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6691 - wine_quality_loss: 0.6380 - wine_type_loss: 0.0311 - wine_quality_root_mean_squared_error: 0.7988 - wine_type_accuracy: 0.9945 - val_loss: 0.7172 - val_wine_quality_loss: 0.6938 - val_wine_type_loss: 0.0234 - val_wine_quality_root_mean_squared_error: 0.8330 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 27/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6493 - wine_quality_loss: 0.6187 - wine_type_loss: 0.0306 - wine_quality_root_mean_squared_error: 0.7866 - wine_type_accuracy: 0.9949 - val_loss: 0.6966 - val_wine_quality_loss: 0.6737 - val_wine_type_loss: 0.0229 - val_wine_quality_root_mean_squared_error: 0.8208 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 28/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6333 - wine_quality_loss: 0.6032 - wine_type_loss: 0.0301 - wine_quality_root_mean_squared_error: 0.7766 - wine_type_accuracy: 0.9949 - val_loss: 0.6884 - val_wine_quality_loss: 0.6658 - val_wine_type_loss: 0.0226 - val_wine_quality_root_mean_squared_error: 0.8160 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 29/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6174 - wine_quality_loss: 0.5877 - wine_type_loss: 0.0297 - wine_quality_root_mean_squared_error: 0.7666 - wine_type_accuracy: 0.9952 - val_loss: 0.6730 - val_wine_quality_loss: 0.6509 - val_wine_type_loss: 0.0222 - val_wine_quality_root_mean_squared_error: 0.8068 - val_wine_type_accuracy: 0.9933\n",
            "Epoch 30/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.6031 - wine_quality_loss: 0.5738 - wine_type_loss: 0.0293 - wine_quality_root_mean_squared_error: 0.7575 - wine_type_accuracy: 0.9957 - val_loss: 0.6598 - val_wine_quality_loss: 0.6381 - val_wine_type_loss: 0.0217 - val_wine_quality_root_mean_squared_error: 0.7988 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 31/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5910 - wine_quality_loss: 0.5621 - wine_type_loss: 0.0289 - wine_quality_root_mean_squared_error: 0.7498 - wine_type_accuracy: 0.9957 - val_loss: 0.6429 - val_wine_quality_loss: 0.6216 - val_wine_type_loss: 0.0213 - val_wine_quality_root_mean_squared_error: 0.7884 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 32/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5782 - wine_quality_loss: 0.5496 - wine_type_loss: 0.0286 - wine_quality_root_mean_squared_error: 0.7414 - wine_type_accuracy: 0.9957 - val_loss: 0.6410 - val_wine_quality_loss: 0.6198 - val_wine_type_loss: 0.0212 - val_wine_quality_root_mean_squared_error: 0.7873 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 33/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5652 - wine_quality_loss: 0.5369 - wine_type_loss: 0.0283 - wine_quality_root_mean_squared_error: 0.7328 - wine_type_accuracy: 0.9957 - val_loss: 0.6356 - val_wine_quality_loss: 0.6148 - val_wine_type_loss: 0.0208 - val_wine_quality_root_mean_squared_error: 0.7841 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 34/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5581 - wine_quality_loss: 0.5301 - wine_type_loss: 0.0280 - wine_quality_root_mean_squared_error: 0.7281 - wine_type_accuracy: 0.9957 - val_loss: 0.6127 - val_wine_quality_loss: 0.5922 - val_wine_type_loss: 0.0205 - val_wine_quality_root_mean_squared_error: 0.7695 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 35/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5487 - wine_quality_loss: 0.5210 - wine_type_loss: 0.0277 - wine_quality_root_mean_squared_error: 0.7218 - wine_type_accuracy: 0.9959 - val_loss: 0.6094 - val_wine_quality_loss: 0.5889 - val_wine_type_loss: 0.0205 - val_wine_quality_root_mean_squared_error: 0.7674 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 36/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5401 - wine_quality_loss: 0.5127 - wine_type_loss: 0.0274 - wine_quality_root_mean_squared_error: 0.7160 - wine_type_accuracy: 0.9957 - val_loss: 0.6098 - val_wine_quality_loss: 0.5897 - val_wine_type_loss: 0.0202 - val_wine_quality_root_mean_squared_error: 0.7679 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 37/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5353 - wine_quality_loss: 0.5081 - wine_type_loss: 0.0272 - wine_quality_root_mean_squared_error: 0.7128 - wine_type_accuracy: 0.9957 - val_loss: 0.6002 - val_wine_quality_loss: 0.5801 - val_wine_type_loss: 0.0201 - val_wine_quality_root_mean_squared_error: 0.7616 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 38/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5283 - wine_quality_loss: 0.5013 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.7080 - wine_type_accuracy: 0.9957 - val_loss: 0.5933 - val_wine_quality_loss: 0.5735 - val_wine_type_loss: 0.0198 - val_wine_quality_root_mean_squared_error: 0.7573 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 39/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5216 - wine_quality_loss: 0.4948 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.7034 - wine_type_accuracy: 0.9959 - val_loss: 0.5848 - val_wine_quality_loss: 0.5652 - val_wine_type_loss: 0.0196 - val_wine_quality_root_mean_squared_error: 0.7518 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 40/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5163 - wine_quality_loss: 0.4897 - wine_type_loss: 0.0265 - wine_quality_root_mean_squared_error: 0.6998 - wine_type_accuracy: 0.9959 - val_loss: 0.5925 - val_wine_quality_loss: 0.5727 - val_wine_type_loss: 0.0197 - val_wine_quality_root_mean_squared_error: 0.7568 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 41/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5109 - wine_quality_loss: 0.4846 - wine_type_loss: 0.0263 - wine_quality_root_mean_squared_error: 0.6961 - wine_type_accuracy: 0.9959 - val_loss: 0.5754 - val_wine_quality_loss: 0.5561 - val_wine_type_loss: 0.0193 - val_wine_quality_root_mean_squared_error: 0.7457 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 42/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5081 - wine_quality_loss: 0.4819 - wine_type_loss: 0.0261 - wine_quality_root_mean_squared_error: 0.6942 - wine_type_accuracy: 0.9959 - val_loss: 0.5701 - val_wine_quality_loss: 0.5509 - val_wine_type_loss: 0.0192 - val_wine_quality_root_mean_squared_error: 0.7422 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 43/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5023 - wine_quality_loss: 0.4764 - wine_type_loss: 0.0259 - wine_quality_root_mean_squared_error: 0.6902 - wine_type_accuracy: 0.9959 - val_loss: 0.5710 - val_wine_quality_loss: 0.5519 - val_wine_type_loss: 0.0192 - val_wine_quality_root_mean_squared_error: 0.7429 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 44/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.5001 - wine_quality_loss: 0.4744 - wine_type_loss: 0.0257 - wine_quality_root_mean_squared_error: 0.6887 - wine_type_accuracy: 0.9959 - val_loss: 0.5645 - val_wine_quality_loss: 0.5455 - val_wine_type_loss: 0.0190 - val_wine_quality_root_mean_squared_error: 0.7386 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 45/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4956 - wine_quality_loss: 0.4701 - wine_type_loss: 0.0255 - wine_quality_root_mean_squared_error: 0.6856 - wine_type_accuracy: 0.9959 - val_loss: 0.5620 - val_wine_quality_loss: 0.5432 - val_wine_type_loss: 0.0188 - val_wine_quality_root_mean_squared_error: 0.7370 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 46/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4933 - wine_quality_loss: 0.4680 - wine_type_loss: 0.0253 - wine_quality_root_mean_squared_error: 0.6841 - wine_type_accuracy: 0.9957 - val_loss: 0.5572 - val_wine_quality_loss: 0.5382 - val_wine_type_loss: 0.0190 - val_wine_quality_root_mean_squared_error: 0.7337 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 47/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4902 - wine_quality_loss: 0.4651 - wine_type_loss: 0.0251 - wine_quality_root_mean_squared_error: 0.6820 - wine_type_accuracy: 0.9959 - val_loss: 0.5565 - val_wine_quality_loss: 0.5378 - val_wine_type_loss: 0.0187 - val_wine_quality_root_mean_squared_error: 0.7333 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 48/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4872 - wine_quality_loss: 0.4622 - wine_type_loss: 0.0250 - wine_quality_root_mean_squared_error: 0.6799 - wine_type_accuracy: 0.9959 - val_loss: 0.5640 - val_wine_quality_loss: 0.5456 - val_wine_type_loss: 0.0184 - val_wine_quality_root_mean_squared_error: 0.7386 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 49/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4847 - wine_quality_loss: 0.4598 - wine_type_loss: 0.0249 - wine_quality_root_mean_squared_error: 0.6781 - wine_type_accuracy: 0.9957 - val_loss: 0.5654 - val_wine_quality_loss: 0.5469 - val_wine_type_loss: 0.0185 - val_wine_quality_root_mean_squared_error: 0.7395 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 50/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4817 - wine_quality_loss: 0.4571 - wine_type_loss: 0.0246 - wine_quality_root_mean_squared_error: 0.6761 - wine_type_accuracy: 0.9957 - val_loss: 0.5493 - val_wine_quality_loss: 0.5311 - val_wine_type_loss: 0.0182 - val_wine_quality_root_mean_squared_error: 0.7287 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 51/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4806 - wine_quality_loss: 0.4560 - wine_type_loss: 0.0245 - wine_quality_root_mean_squared_error: 0.6753 - wine_type_accuracy: 0.9959 - val_loss: 0.5562 - val_wine_quality_loss: 0.5380 - val_wine_type_loss: 0.0181 - val_wine_quality_root_mean_squared_error: 0.7335 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 52/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4785 - wine_quality_loss: 0.4542 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.6739 - wine_type_accuracy: 0.9962 - val_loss: 0.5513 - val_wine_quality_loss: 0.5331 - val_wine_type_loss: 0.0182 - val_wine_quality_root_mean_squared_error: 0.7302 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 53/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4771 - wine_quality_loss: 0.4529 - wine_type_loss: 0.0242 - wine_quality_root_mean_squared_error: 0.6730 - wine_type_accuracy: 0.9959 - val_loss: 0.5485 - val_wine_quality_loss: 0.5302 - val_wine_type_loss: 0.0183 - val_wine_quality_root_mean_squared_error: 0.7281 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 54/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4732 - wine_quality_loss: 0.4491 - wine_type_loss: 0.0241 - wine_quality_root_mean_squared_error: 0.6702 - wine_type_accuracy: 0.9957 - val_loss: 0.5630 - val_wine_quality_loss: 0.5450 - val_wine_type_loss: 0.0180 - val_wine_quality_root_mean_squared_error: 0.7382 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 55/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4726 - wine_quality_loss: 0.4486 - wine_type_loss: 0.0239 - wine_quality_root_mean_squared_error: 0.6698 - wine_type_accuracy: 0.9959 - val_loss: 0.5423 - val_wine_quality_loss: 0.5245 - val_wine_type_loss: 0.0178 - val_wine_quality_root_mean_squared_error: 0.7242 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 56/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4712 - wine_quality_loss: 0.4473 - wine_type_loss: 0.0238 - wine_quality_root_mean_squared_error: 0.6688 - wine_type_accuracy: 0.9959 - val_loss: 0.5402 - val_wine_quality_loss: 0.5225 - val_wine_type_loss: 0.0178 - val_wine_quality_root_mean_squared_error: 0.7228 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 57/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4691 - wine_quality_loss: 0.4454 - wine_type_loss: 0.0237 - wine_quality_root_mean_squared_error: 0.6674 - wine_type_accuracy: 0.9959 - val_loss: 0.5543 - val_wine_quality_loss: 0.5365 - val_wine_type_loss: 0.0178 - val_wine_quality_root_mean_squared_error: 0.7325 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 58/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4678 - wine_quality_loss: 0.4442 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.6665 - wine_type_accuracy: 0.9959 - val_loss: 0.5437 - val_wine_quality_loss: 0.5260 - val_wine_type_loss: 0.0177 - val_wine_quality_root_mean_squared_error: 0.7253 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 59/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4658 - wine_quality_loss: 0.4424 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.6651 - wine_type_accuracy: 0.9959 - val_loss: 0.5383 - val_wine_quality_loss: 0.5207 - val_wine_type_loss: 0.0176 - val_wine_quality_root_mean_squared_error: 0.7216 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 60/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4641 - wine_quality_loss: 0.4408 - wine_type_loss: 0.0233 - wine_quality_root_mean_squared_error: 0.6639 - wine_type_accuracy: 0.9959 - val_loss: 0.5395 - val_wine_quality_loss: 0.5219 - val_wine_type_loss: 0.0176 - val_wine_quality_root_mean_squared_error: 0.7224 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 61/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4633 - wine_quality_loss: 0.4401 - wine_type_loss: 0.0232 - wine_quality_root_mean_squared_error: 0.6634 - wine_type_accuracy: 0.9962 - val_loss: 0.5366 - val_wine_quality_loss: 0.5190 - val_wine_type_loss: 0.0176 - val_wine_quality_root_mean_squared_error: 0.7204 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 62/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4617 - wine_quality_loss: 0.4387 - wine_type_loss: 0.0230 - wine_quality_root_mean_squared_error: 0.6624 - wine_type_accuracy: 0.9962 - val_loss: 0.5381 - val_wine_quality_loss: 0.5207 - val_wine_type_loss: 0.0174 - val_wine_quality_root_mean_squared_error: 0.7216 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 63/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4602 - wine_quality_loss: 0.4372 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.6612 - wine_type_accuracy: 0.9959 - val_loss: 0.5368 - val_wine_quality_loss: 0.5193 - val_wine_type_loss: 0.0175 - val_wine_quality_root_mean_squared_error: 0.7206 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 64/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4592 - wine_quality_loss: 0.4364 - wine_type_loss: 0.0228 - wine_quality_root_mean_squared_error: 0.6606 - wine_type_accuracy: 0.9962 - val_loss: 0.5368 - val_wine_quality_loss: 0.5191 - val_wine_type_loss: 0.0177 - val_wine_quality_root_mean_squared_error: 0.7205 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 65/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4592 - wine_quality_loss: 0.4365 - wine_type_loss: 0.0227 - wine_quality_root_mean_squared_error: 0.6607 - wine_type_accuracy: 0.9959 - val_loss: 0.5382 - val_wine_quality_loss: 0.5205 - val_wine_type_loss: 0.0177 - val_wine_quality_root_mean_squared_error: 0.7215 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 66/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4566 - wine_quality_loss: 0.4341 - wine_type_loss: 0.0225 - wine_quality_root_mean_squared_error: 0.6588 - wine_type_accuracy: 0.9959 - val_loss: 0.5404 - val_wine_quality_loss: 0.5230 - val_wine_type_loss: 0.0175 - val_wine_quality_root_mean_squared_error: 0.7232 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 67/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4551 - wine_quality_loss: 0.4327 - wine_type_loss: 0.0224 - wine_quality_root_mean_squared_error: 0.6578 - wine_type_accuracy: 0.9959 - val_loss: 0.5352 - val_wine_quality_loss: 0.5180 - val_wine_type_loss: 0.0172 - val_wine_quality_root_mean_squared_error: 0.7197 - val_wine_type_accuracy: 0.9942\n",
            "Epoch 68/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4528 - wine_quality_loss: 0.4305 - wine_type_loss: 0.0224 - wine_quality_root_mean_squared_error: 0.6561 - wine_type_accuracy: 0.9962 - val_loss: 0.5429 - val_wine_quality_loss: 0.5258 - val_wine_type_loss: 0.0171 - val_wine_quality_root_mean_squared_error: 0.7251 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 69/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4535 - wine_quality_loss: 0.4313 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.6567 - wine_type_accuracy: 0.9959 - val_loss: 0.5333 - val_wine_quality_loss: 0.5164 - val_wine_type_loss: 0.0169 - val_wine_quality_root_mean_squared_error: 0.7186 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 70/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4536 - wine_quality_loss: 0.4315 - wine_type_loss: 0.0221 - wine_quality_root_mean_squared_error: 0.6569 - wine_type_accuracy: 0.9959 - val_loss: 0.5406 - val_wine_quality_loss: 0.5237 - val_wine_type_loss: 0.0169 - val_wine_quality_root_mean_squared_error: 0.7237 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 71/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4514 - wine_quality_loss: 0.4294 - wine_type_loss: 0.0221 - wine_quality_root_mean_squared_error: 0.6553 - wine_type_accuracy: 0.9959 - val_loss: 0.5423 - val_wine_quality_loss: 0.5254 - val_wine_type_loss: 0.0170 - val_wine_quality_root_mean_squared_error: 0.7248 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 72/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4496 - wine_quality_loss: 0.4277 - wine_type_loss: 0.0219 - wine_quality_root_mean_squared_error: 0.6540 - wine_type_accuracy: 0.9959 - val_loss: 0.5325 - val_wine_quality_loss: 0.5154 - val_wine_type_loss: 0.0171 - val_wine_quality_root_mean_squared_error: 0.7179 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 73/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4486 - wine_quality_loss: 0.4268 - wine_type_loss: 0.0218 - wine_quality_root_mean_squared_error: 0.6533 - wine_type_accuracy: 0.9959 - val_loss: 0.5422 - val_wine_quality_loss: 0.5254 - val_wine_type_loss: 0.0168 - val_wine_quality_root_mean_squared_error: 0.7248 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 74/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4471 - wine_quality_loss: 0.4254 - wine_type_loss: 0.0217 - wine_quality_root_mean_squared_error: 0.6522 - wine_type_accuracy: 0.9959 - val_loss: 0.5456 - val_wine_quality_loss: 0.5287 - val_wine_type_loss: 0.0169 - val_wine_quality_root_mean_squared_error: 0.7271 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 75/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4484 - wine_quality_loss: 0.4268 - wine_type_loss: 0.0216 - wine_quality_root_mean_squared_error: 0.6533 - wine_type_accuracy: 0.9959 - val_loss: 0.5334 - val_wine_quality_loss: 0.5166 - val_wine_type_loss: 0.0168 - val_wine_quality_root_mean_squared_error: 0.7187 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 76/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4459 - wine_quality_loss: 0.4244 - wine_type_loss: 0.0216 - wine_quality_root_mean_squared_error: 0.6514 - wine_type_accuracy: 0.9962 - val_loss: 0.5354 - val_wine_quality_loss: 0.5184 - val_wine_type_loss: 0.0169 - val_wine_quality_root_mean_squared_error: 0.7200 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 77/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4449 - wine_quality_loss: 0.4236 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.6508 - wine_type_accuracy: 0.9962 - val_loss: 0.5408 - val_wine_quality_loss: 0.5241 - val_wine_type_loss: 0.0167 - val_wine_quality_root_mean_squared_error: 0.7240 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 78/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4435 - wine_quality_loss: 0.4221 - wine_type_loss: 0.0214 - wine_quality_root_mean_squared_error: 0.6497 - wine_type_accuracy: 0.9962 - val_loss: 0.5349 - val_wine_quality_loss: 0.5182 - val_wine_type_loss: 0.0167 - val_wine_quality_root_mean_squared_error: 0.7199 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 79/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4425 - wine_quality_loss: 0.4212 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.6490 - wine_type_accuracy: 0.9964 - val_loss: 0.5265 - val_wine_quality_loss: 0.5097 - val_wine_type_loss: 0.0168 - val_wine_quality_root_mean_squared_error: 0.7139 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 80/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4421 - wine_quality_loss: 0.4209 - wine_type_loss: 0.0212 - wine_quality_root_mean_squared_error: 0.6487 - wine_type_accuracy: 0.9962 - val_loss: 0.5340 - val_wine_quality_loss: 0.5172 - val_wine_type_loss: 0.0168 - val_wine_quality_root_mean_squared_error: 0.7192 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 81/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4420 - wine_quality_loss: 0.4208 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.6487 - wine_type_accuracy: 0.9962 - val_loss: 0.5285 - val_wine_quality_loss: 0.5118 - val_wine_type_loss: 0.0167 - val_wine_quality_root_mean_squared_error: 0.7154 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 82/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4389 - wine_quality_loss: 0.4178 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.6464 - wine_type_accuracy: 0.9966 - val_loss: 0.5334 - val_wine_quality_loss: 0.5168 - val_wine_type_loss: 0.0166 - val_wine_quality_root_mean_squared_error: 0.7189 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 83/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4398 - wine_quality_loss: 0.4189 - wine_type_loss: 0.0209 - wine_quality_root_mean_squared_error: 0.6472 - wine_type_accuracy: 0.9964 - val_loss: 0.5285 - val_wine_quality_loss: 0.5118 - val_wine_type_loss: 0.0167 - val_wine_quality_root_mean_squared_error: 0.7154 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 84/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4384 - wine_quality_loss: 0.4176 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.6462 - wine_type_accuracy: 0.9964 - val_loss: 0.5310 - val_wine_quality_loss: 0.5146 - val_wine_type_loss: 0.0164 - val_wine_quality_root_mean_squared_error: 0.7174 - val_wine_type_accuracy: 0.9962\n",
            "Epoch 85/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4368 - wine_quality_loss: 0.4161 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.6450 - wine_type_accuracy: 0.9964 - val_loss: 0.5303 - val_wine_quality_loss: 0.5142 - val_wine_type_loss: 0.0161 - val_wine_quality_root_mean_squared_error: 0.7171 - val_wine_type_accuracy: 0.9962\n",
            "Epoch 86/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4369 - wine_quality_loss: 0.4162 - wine_type_loss: 0.0207 - wine_quality_root_mean_squared_error: 0.6451 - wine_type_accuracy: 0.9966 - val_loss: 0.5455 - val_wine_quality_loss: 0.5290 - val_wine_type_loss: 0.0165 - val_wine_quality_root_mean_squared_error: 0.7273 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 87/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4363 - wine_quality_loss: 0.4157 - wine_type_loss: 0.0206 - wine_quality_root_mean_squared_error: 0.6447 - wine_type_accuracy: 0.9964 - val_loss: 0.5250 - val_wine_quality_loss: 0.5087 - val_wine_type_loss: 0.0163 - val_wine_quality_root_mean_squared_error: 0.7132 - val_wine_type_accuracy: 0.9962\n",
            "Epoch 88/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4355 - wine_quality_loss: 0.4150 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.6442 - wine_type_accuracy: 0.9964 - val_loss: 0.5290 - val_wine_quality_loss: 0.5125 - val_wine_type_loss: 0.0165 - val_wine_quality_root_mean_squared_error: 0.7159 - val_wine_type_accuracy: 0.9952\n",
            "Epoch 89/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4336 - wine_quality_loss: 0.4132 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.6428 - wine_type_accuracy: 0.9964 - val_loss: 0.5246 - val_wine_quality_loss: 0.5082 - val_wine_type_loss: 0.0165 - val_wine_quality_root_mean_squared_error: 0.7129 - val_wine_type_accuracy: 0.9962\n",
            "Epoch 90/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4325 - wine_quality_loss: 0.4122 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.6420 - wine_type_accuracy: 0.9964 - val_loss: 0.5272 - val_wine_quality_loss: 0.5109 - val_wine_type_loss: 0.0163 - val_wine_quality_root_mean_squared_error: 0.7148 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 91/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4329 - wine_quality_loss: 0.4126 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.6423 - wine_type_accuracy: 0.9964 - val_loss: 0.5259 - val_wine_quality_loss: 0.5096 - val_wine_type_loss: 0.0163 - val_wine_quality_root_mean_squared_error: 0.7139 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 92/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4306 - wine_quality_loss: 0.4104 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.6406 - wine_type_accuracy: 0.9964 - val_loss: 0.5323 - val_wine_quality_loss: 0.5159 - val_wine_type_loss: 0.0164 - val_wine_quality_root_mean_squared_error: 0.7183 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 93/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4311 - wine_quality_loss: 0.4109 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.6410 - wine_type_accuracy: 0.9964 - val_loss: 0.5235 - val_wine_quality_loss: 0.5071 - val_wine_type_loss: 0.0164 - val_wine_quality_root_mean_squared_error: 0.7121 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 94/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4305 - wine_quality_loss: 0.4104 - wine_type_loss: 0.0201 - wine_quality_root_mean_squared_error: 0.6406 - wine_type_accuracy: 0.9964 - val_loss: 0.5268 - val_wine_quality_loss: 0.5106 - val_wine_type_loss: 0.0162 - val_wine_quality_root_mean_squared_error: 0.7145 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 95/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4296 - wine_quality_loss: 0.4096 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.6400 - wine_type_accuracy: 0.9964 - val_loss: 0.5221 - val_wine_quality_loss: 0.5059 - val_wine_type_loss: 0.0162 - val_wine_quality_root_mean_squared_error: 0.7112 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 96/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4289 - wine_quality_loss: 0.4090 - wine_type_loss: 0.0199 - wine_quality_root_mean_squared_error: 0.6395 - wine_type_accuracy: 0.9964 - val_loss: 0.5249 - val_wine_quality_loss: 0.5087 - val_wine_type_loss: 0.0163 - val_wine_quality_root_mean_squared_error: 0.7132 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 97/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4283 - wine_quality_loss: 0.4084 - wine_type_loss: 0.0199 - wine_quality_root_mean_squared_error: 0.6390 - wine_type_accuracy: 0.9964 - val_loss: 0.5233 - val_wine_quality_loss: 0.5070 - val_wine_type_loss: 0.0163 - val_wine_quality_root_mean_squared_error: 0.7121 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 98/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4290 - wine_quality_loss: 0.4092 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.6397 - wine_type_accuracy: 0.9964 - val_loss: 0.5243 - val_wine_quality_loss: 0.5084 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7130 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 99/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4273 - wine_quality_loss: 0.4076 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.6384 - wine_type_accuracy: 0.9964 - val_loss: 0.5222 - val_wine_quality_loss: 0.5062 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7115 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 100/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4271 - wine_quality_loss: 0.4075 - wine_type_loss: 0.0196 - wine_quality_root_mean_squared_error: 0.6384 - wine_type_accuracy: 0.9964 - val_loss: 0.5367 - val_wine_quality_loss: 0.5205 - val_wine_type_loss: 0.0161 - val_wine_quality_root_mean_squared_error: 0.7215 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 101/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4259 - wine_quality_loss: 0.4064 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.6375 - wine_type_accuracy: 0.9964 - val_loss: 0.5211 - val_wine_quality_loss: 0.5052 - val_wine_type_loss: 0.0159 - val_wine_quality_root_mean_squared_error: 0.7108 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 102/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4255 - wine_quality_loss: 0.4060 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.6372 - wine_type_accuracy: 0.9964 - val_loss: 0.5252 - val_wine_quality_loss: 0.5093 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7136 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 103/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4241 - wine_quality_loss: 0.4046 - wine_type_loss: 0.0194 - wine_quality_root_mean_squared_error: 0.6361 - wine_type_accuracy: 0.9964 - val_loss: 0.5237 - val_wine_quality_loss: 0.5080 - val_wine_type_loss: 0.0158 - val_wine_quality_root_mean_squared_error: 0.7127 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 104/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4231 - wine_quality_loss: 0.4037 - wine_type_loss: 0.0194 - wine_quality_root_mean_squared_error: 0.6354 - wine_type_accuracy: 0.9964 - val_loss: 0.5204 - val_wine_quality_loss: 0.5046 - val_wine_type_loss: 0.0158 - val_wine_quality_root_mean_squared_error: 0.7104 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 105/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4227 - wine_quality_loss: 0.4034 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.6352 - wine_type_accuracy: 0.9964 - val_loss: 0.5266 - val_wine_quality_loss: 0.5107 - val_wine_type_loss: 0.0159 - val_wine_quality_root_mean_squared_error: 0.7146 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 106/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4226 - wine_quality_loss: 0.4033 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.6351 - wine_type_accuracy: 0.9964 - val_loss: 0.5247 - val_wine_quality_loss: 0.5087 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7132 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 107/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4227 - wine_quality_loss: 0.4035 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.6352 - wine_type_accuracy: 0.9964 - val_loss: 0.5221 - val_wine_quality_loss: 0.5060 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7114 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 108/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4211 - wine_quality_loss: 0.4020 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.6340 - wine_type_accuracy: 0.9964 - val_loss: 0.5216 - val_wine_quality_loss: 0.5056 - val_wine_type_loss: 0.0160 - val_wine_quality_root_mean_squared_error: 0.7111 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 109/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4201 - wine_quality_loss: 0.4011 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.6333 - wine_type_accuracy: 0.9964 - val_loss: 0.5216 - val_wine_quality_loss: 0.5058 - val_wine_type_loss: 0.0158 - val_wine_quality_root_mean_squared_error: 0.7112 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 110/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4203 - wine_quality_loss: 0.4015 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.6336 - wine_type_accuracy: 0.9964 - val_loss: 0.5251 - val_wine_quality_loss: 0.5094 - val_wine_type_loss: 0.0157 - val_wine_quality_root_mean_squared_error: 0.7137 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 111/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4199 - wine_quality_loss: 0.4010 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.6333 - wine_type_accuracy: 0.9964 - val_loss: 0.5195 - val_wine_quality_loss: 0.5038 - val_wine_type_loss: 0.0157 - val_wine_quality_root_mean_squared_error: 0.7098 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 112/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4186 - wine_quality_loss: 0.3998 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.6323 - wine_type_accuracy: 0.9964 - val_loss: 0.5212 - val_wine_quality_loss: 0.5054 - val_wine_type_loss: 0.0159 - val_wine_quality_root_mean_squared_error: 0.7109 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 113/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4182 - wine_quality_loss: 0.3995 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.6320 - wine_type_accuracy: 0.9964 - val_loss: 0.5177 - val_wine_quality_loss: 0.5020 - val_wine_type_loss: 0.0157 - val_wine_quality_root_mean_squared_error: 0.7085 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 114/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4172 - wine_quality_loss: 0.3985 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.6313 - wine_type_accuracy: 0.9964 - val_loss: 0.5305 - val_wine_quality_loss: 0.5149 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7175 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 115/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4171 - wine_quality_loss: 0.3984 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.6312 - wine_type_accuracy: 0.9964 - val_loss: 0.5174 - val_wine_quality_loss: 0.5018 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7084 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 116/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4167 - wine_quality_loss: 0.3981 - wine_type_loss: 0.0186 - wine_quality_root_mean_squared_error: 0.6310 - wine_type_accuracy: 0.9964 - val_loss: 0.5178 - val_wine_quality_loss: 0.5021 - val_wine_type_loss: 0.0157 - val_wine_quality_root_mean_squared_error: 0.7086 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 117/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4147 - wine_quality_loss: 0.3962 - wine_type_loss: 0.0185 - wine_quality_root_mean_squared_error: 0.6295 - wine_type_accuracy: 0.9964 - val_loss: 0.5366 - val_wine_quality_loss: 0.5208 - val_wine_type_loss: 0.0158 - val_wine_quality_root_mean_squared_error: 0.7217 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 118/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4151 - wine_quality_loss: 0.3967 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.6299 - wine_type_accuracy: 0.9964 - val_loss: 0.5230 - val_wine_quality_loss: 0.5074 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7123 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 119/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4146 - wine_quality_loss: 0.3963 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.6295 - wine_type_accuracy: 0.9964 - val_loss: 0.5305 - val_wine_quality_loss: 0.5148 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7175 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 120/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4143 - wine_quality_loss: 0.3960 - wine_type_loss: 0.0183 - wine_quality_root_mean_squared_error: 0.6293 - wine_type_accuracy: 0.9964 - val_loss: 0.5171 - val_wine_quality_loss: 0.5014 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7081 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 121/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4127 - wine_quality_loss: 0.3945 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.6281 - wine_type_accuracy: 0.9964 - val_loss: 0.5280 - val_wine_quality_loss: 0.5124 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7159 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 122/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4135 - wine_quality_loss: 0.3953 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.6288 - wine_type_accuracy: 0.9964 - val_loss: 0.5210 - val_wine_quality_loss: 0.5053 - val_wine_type_loss: 0.0157 - val_wine_quality_root_mean_squared_error: 0.7108 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 123/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4125 - wine_quality_loss: 0.3943 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.6280 - wine_type_accuracy: 0.9964 - val_loss: 0.5155 - val_wine_quality_loss: 0.4999 - val_wine_type_loss: 0.0156 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 124/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4134 - wine_quality_loss: 0.3953 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.6287 - wine_type_accuracy: 0.9964 - val_loss: 0.5180 - val_wine_quality_loss: 0.5025 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7089 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 125/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4114 - wine_quality_loss: 0.3933 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.6272 - wine_type_accuracy: 0.9964 - val_loss: 0.5266 - val_wine_quality_loss: 0.5111 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7149 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 126/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4101 - wine_quality_loss: 0.3921 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.6262 - wine_type_accuracy: 0.9964 - val_loss: 0.5181 - val_wine_quality_loss: 0.5026 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7089 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 127/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4104 - wine_quality_loss: 0.3924 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.6264 - wine_type_accuracy: 0.9964 - val_loss: 0.5173 - val_wine_quality_loss: 0.5018 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7084 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 128/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4096 - wine_quality_loss: 0.3917 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.6258 - wine_type_accuracy: 0.9964 - val_loss: 0.5143 - val_wine_quality_loss: 0.4988 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7063 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 129/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4082 - wine_quality_loss: 0.3903 - wine_type_loss: 0.0179 - wine_quality_root_mean_squared_error: 0.6248 - wine_type_accuracy: 0.9964 - val_loss: 0.5183 - val_wine_quality_loss: 0.5028 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7091 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 130/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4096 - wine_quality_loss: 0.3918 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.6260 - wine_type_accuracy: 0.9964 - val_loss: 0.5137 - val_wine_quality_loss: 0.4985 - val_wine_type_loss: 0.0153 - val_wine_quality_root_mean_squared_error: 0.7060 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 131/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4078 - wine_quality_loss: 0.3900 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.6245 - wine_type_accuracy: 0.9964 - val_loss: 0.5180 - val_wine_quality_loss: 0.5027 - val_wine_type_loss: 0.0153 - val_wine_quality_root_mean_squared_error: 0.7090 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 132/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4077 - wine_quality_loss: 0.3900 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.6245 - wine_type_accuracy: 0.9964 - val_loss: 0.5177 - val_wine_quality_loss: 0.5024 - val_wine_type_loss: 0.0153 - val_wine_quality_root_mean_squared_error: 0.7088 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 133/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4080 - wine_quality_loss: 0.3903 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.6247 - wine_type_accuracy: 0.9964 - val_loss: 0.5275 - val_wine_quality_loss: 0.5121 - val_wine_type_loss: 0.0154 - val_wine_quality_root_mean_squared_error: 0.7156 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 134/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4069 - wine_quality_loss: 0.3893 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.6240 - wine_type_accuracy: 0.9964 - val_loss: 0.5156 - val_wine_quality_loss: 0.5001 - val_wine_type_loss: 0.0155 - val_wine_quality_root_mean_squared_error: 0.7072 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 135/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4058 - wine_quality_loss: 0.3882 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.6231 - wine_type_accuracy: 0.9964 - val_loss: 0.5223 - val_wine_quality_loss: 0.5070 - val_wine_type_loss: 0.0154 - val_wine_quality_root_mean_squared_error: 0.7120 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 136/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4062 - wine_quality_loss: 0.3887 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.6234 - wine_type_accuracy: 0.9964 - val_loss: 0.5163 - val_wine_quality_loss: 0.5011 - val_wine_type_loss: 0.0153 - val_wine_quality_root_mean_squared_error: 0.7079 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 137/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4051 - wine_quality_loss: 0.3876 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.6226 - wine_type_accuracy: 0.9964 - val_loss: 0.5172 - val_wine_quality_loss: 0.5022 - val_wine_type_loss: 0.0150 - val_wine_quality_root_mean_squared_error: 0.7086 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 138/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4040 - wine_quality_loss: 0.3865 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.6217 - wine_type_accuracy: 0.9964 - val_loss: 0.5276 - val_wine_quality_loss: 0.5125 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7159 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 139/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4050 - wine_quality_loss: 0.3876 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.6226 - wine_type_accuracy: 0.9964 - val_loss: 0.5153 - val_wine_quality_loss: 0.5003 - val_wine_type_loss: 0.0150 - val_wine_quality_root_mean_squared_error: 0.7073 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 140/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4037 - wine_quality_loss: 0.3864 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.6216 - wine_type_accuracy: 0.9964 - val_loss: 0.5179 - val_wine_quality_loss: 0.5027 - val_wine_type_loss: 0.0152 - val_wine_quality_root_mean_squared_error: 0.7090 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 141/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4029 - wine_quality_loss: 0.3856 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.6210 - wine_type_accuracy: 0.9964 - val_loss: 0.5161 - val_wine_quality_loss: 0.5011 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7079 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 142/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4024 - wine_quality_loss: 0.3852 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.6206 - wine_type_accuracy: 0.9964 - val_loss: 0.5143 - val_wine_quality_loss: 0.4992 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7066 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 143/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4021 - wine_quality_loss: 0.3849 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.6204 - wine_type_accuracy: 0.9964 - val_loss: 0.5193 - val_wine_quality_loss: 0.5041 - val_wine_type_loss: 0.0152 - val_wine_quality_root_mean_squared_error: 0.7100 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 144/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4023 - wine_quality_loss: 0.3851 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.6206 - wine_type_accuracy: 0.9964 - val_loss: 0.5174 - val_wine_quality_loss: 0.5023 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7087 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 145/200\n",
            "130/130 [==============================] - 0s 4ms/step - loss: 0.4009 - wine_quality_loss: 0.3838 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.6195 - wine_type_accuracy: 0.9964 - val_loss: 0.5303 - val_wine_quality_loss: 0.5151 - val_wine_type_loss: 0.0152 - val_wine_quality_root_mean_squared_error: 0.7177 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 146/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4003 - wine_quality_loss: 0.3831 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.6190 - wine_type_accuracy: 0.9964 - val_loss: 0.5126 - val_wine_quality_loss: 0.4975 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7053 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 147/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.4001 - wine_quality_loss: 0.3829 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.6188 - wine_type_accuracy: 0.9964 - val_loss: 0.5212 - val_wine_quality_loss: 0.5061 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7114 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 148/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3994 - wine_quality_loss: 0.3824 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.6184 - wine_type_accuracy: 0.9964 - val_loss: 0.5148 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0150 - val_wine_quality_root_mean_squared_error: 0.7069 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 149/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3994 - wine_quality_loss: 0.3824 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.6183 - wine_type_accuracy: 0.9964 - val_loss: 0.5147 - val_wine_quality_loss: 0.4997 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7069 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 150/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3993 - wine_quality_loss: 0.3823 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.6183 - wine_type_accuracy: 0.9964 - val_loss: 0.5215 - val_wine_quality_loss: 0.5064 - val_wine_type_loss: 0.0151 - val_wine_quality_root_mean_squared_error: 0.7116 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 151/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3983 - wine_quality_loss: 0.3815 - wine_type_loss: 0.0169 - wine_quality_root_mean_squared_error: 0.6176 - wine_type_accuracy: 0.9964 - val_loss: 0.5188 - val_wine_quality_loss: 0.5040 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7099 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 152/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3967 - wine_quality_loss: 0.3798 - wine_type_loss: 0.0169 - wine_quality_root_mean_squared_error: 0.6163 - wine_type_accuracy: 0.9964 - val_loss: 0.5145 - val_wine_quality_loss: 0.4996 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7068 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 153/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3979 - wine_quality_loss: 0.3810 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.6173 - wine_type_accuracy: 0.9964 - val_loss: 0.5137 - val_wine_quality_loss: 0.4988 - val_wine_type_loss: 0.0150 - val_wine_quality_root_mean_squared_error: 0.7062 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 154/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3966 - wine_quality_loss: 0.3799 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.6164 - wine_type_accuracy: 0.9964 - val_loss: 0.5146 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 155/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3972 - wine_quality_loss: 0.3805 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.6168 - wine_type_accuracy: 0.9964 - val_loss: 0.5169 - val_wine_quality_loss: 0.5021 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7086 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 156/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3951 - wine_quality_loss: 0.3784 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.6152 - wine_type_accuracy: 0.9966 - val_loss: 0.5142 - val_wine_quality_loss: 0.4996 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7068 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 157/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3953 - wine_quality_loss: 0.3786 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.6153 - wine_type_accuracy: 0.9964 - val_loss: 0.5217 - val_wine_quality_loss: 0.5069 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7120 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 158/200\n",
            "130/130 [==============================] - 1s 4ms/step - loss: 0.3940 - wine_quality_loss: 0.3774 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.6143 - wine_type_accuracy: 0.9964 - val_loss: 0.5246 - val_wine_quality_loss: 0.5097 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7139 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 159/200\n",
            "130/130 [==============================] - 1s 5ms/step - loss: 0.3947 - wine_quality_loss: 0.3781 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.6149 - wine_type_accuracy: 0.9964 - val_loss: 0.5137 - val_wine_quality_loss: 0.4987 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7062 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 160/200\n",
            "130/130 [==============================] - 1s 5ms/step - loss: 0.3935 - wine_quality_loss: 0.3770 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.6140 - wine_type_accuracy: 0.9964 - val_loss: 0.5369 - val_wine_quality_loss: 0.5221 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7226 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 161/200\n",
            "130/130 [==============================] - 1s 5ms/step - loss: 0.3946 - wine_quality_loss: 0.3781 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.6149 - wine_type_accuracy: 0.9964 - val_loss: 0.5134 - val_wine_quality_loss: 0.4987 - val_wine_type_loss: 0.0147 - val_wine_quality_root_mean_squared_error: 0.7062 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 162/200\n",
            "130/130 [==============================] - 1s 6ms/step - loss: 0.3921 - wine_quality_loss: 0.3756 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.6129 - wine_type_accuracy: 0.9964 - val_loss: 0.5199 - val_wine_quality_loss: 0.5050 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7106 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 163/200\n",
            "130/130 [==============================] - 1s 5ms/step - loss: 0.3928 - wine_quality_loss: 0.3764 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.6135 - wine_type_accuracy: 0.9966 - val_loss: 0.5153 - val_wine_quality_loss: 0.5005 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7075 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 164/200\n",
            "130/130 [==============================] - 1s 5ms/step - loss: 0.3915 - wine_quality_loss: 0.3751 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.6125 - wine_type_accuracy: 0.9966 - val_loss: 0.5157 - val_wine_quality_loss: 0.5009 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7078 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 165/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3917 - wine_quality_loss: 0.3754 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.6127 - wine_type_accuracy: 0.9964 - val_loss: 0.5194 - val_wine_quality_loss: 0.5045 - val_wine_type_loss: 0.0149 - val_wine_quality_root_mean_squared_error: 0.7103 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 166/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3912 - wine_quality_loss: 0.3749 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.6123 - wine_type_accuracy: 0.9966 - val_loss: 0.5149 - val_wine_quality_loss: 0.5001 - val_wine_type_loss: 0.0148 - val_wine_quality_root_mean_squared_error: 0.7072 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 167/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3909 - wine_quality_loss: 0.3746 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.6121 - wine_type_accuracy: 0.9966 - val_loss: 0.5138 - val_wine_quality_loss: 0.4992 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7065 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 168/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3902 - wine_quality_loss: 0.3739 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.6115 - wine_type_accuracy: 0.9966 - val_loss: 0.5171 - val_wine_quality_loss: 0.5027 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7090 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 169/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3894 - wine_quality_loss: 0.3732 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.6109 - wine_type_accuracy: 0.9966 - val_loss: 0.5225 - val_wine_quality_loss: 0.5080 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7128 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 170/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3893 - wine_quality_loss: 0.3731 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.6108 - wine_type_accuracy: 0.9964 - val_loss: 0.5169 - val_wine_quality_loss: 0.5023 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7087 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 171/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3890 - wine_quality_loss: 0.3728 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.6106 - wine_type_accuracy: 0.9966 - val_loss: 0.5120 - val_wine_quality_loss: 0.4974 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7053 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 172/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3889 - wine_quality_loss: 0.3728 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.6105 - wine_type_accuracy: 0.9966 - val_loss: 0.5227 - val_wine_quality_loss: 0.5082 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7129 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 173/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3880 - wine_quality_loss: 0.3718 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.6098 - wine_type_accuracy: 0.9964 - val_loss: 0.5200 - val_wine_quality_loss: 0.5054 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7109 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 174/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3888 - wine_quality_loss: 0.3727 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.6105 - wine_type_accuracy: 0.9966 - val_loss: 0.5148 - val_wine_quality_loss: 0.5002 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7072 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 175/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3871 - wine_quality_loss: 0.3710 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.6091 - wine_type_accuracy: 0.9966 - val_loss: 0.5144 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7069 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 176/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3871 - wine_quality_loss: 0.3711 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.6092 - wine_type_accuracy: 0.9966 - val_loss: 0.5140 - val_wine_quality_loss: 0.4993 - val_wine_type_loss: 0.0147 - val_wine_quality_root_mean_squared_error: 0.7066 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 177/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3863 - wine_quality_loss: 0.3704 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.6086 - wine_type_accuracy: 0.9966 - val_loss: 0.5144 - val_wine_quality_loss: 0.4999 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 178/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3866 - wine_quality_loss: 0.3706 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.6088 - wine_type_accuracy: 0.9966 - val_loss: 0.5154 - val_wine_quality_loss: 0.5011 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7079 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 179/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3852 - wine_quality_loss: 0.3693 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.6077 - wine_type_accuracy: 0.9966 - val_loss: 0.5143 - val_wine_quality_loss: 0.4999 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 180/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3851 - wine_quality_loss: 0.3692 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.6076 - wine_type_accuracy: 0.9966 - val_loss: 0.5349 - val_wine_quality_loss: 0.5202 - val_wine_type_loss: 0.0146 - val_wine_quality_root_mean_squared_error: 0.7213 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 181/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3843 - wine_quality_loss: 0.3684 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.6070 - wine_type_accuracy: 0.9966 - val_loss: 0.5266 - val_wine_quality_loss: 0.5122 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7157 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 182/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3855 - wine_quality_loss: 0.3697 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.6080 - wine_type_accuracy: 0.9966 - val_loss: 0.5181 - val_wine_quality_loss: 0.5035 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7096 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 183/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3835 - wine_quality_loss: 0.3678 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.6064 - wine_type_accuracy: 0.9966 - val_loss: 0.5312 - val_wine_quality_loss: 0.5165 - val_wine_type_loss: 0.0147 - val_wine_quality_root_mean_squared_error: 0.7187 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 184/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3849 - wine_quality_loss: 0.3692 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.6076 - wine_type_accuracy: 0.9966 - val_loss: 0.5142 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 185/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3829 - wine_quality_loss: 0.3672 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.6060 - wine_type_accuracy: 0.9966 - val_loss: 0.5163 - val_wine_quality_loss: 0.5018 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7084 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 186/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3825 - wine_quality_loss: 0.3668 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.6057 - wine_type_accuracy: 0.9966 - val_loss: 0.5142 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7069 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 187/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3821 - wine_quality_loss: 0.3664 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.6053 - wine_type_accuracy: 0.9966 - val_loss: 0.5193 - val_wine_quality_loss: 0.5050 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7107 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 188/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3816 - wine_quality_loss: 0.3660 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.6050 - wine_type_accuracy: 0.9966 - val_loss: 0.5109 - val_wine_quality_loss: 0.4967 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7047 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 189/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3818 - wine_quality_loss: 0.3662 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.6051 - wine_type_accuracy: 0.9966 - val_loss: 0.5135 - val_wine_quality_loss: 0.4991 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7065 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 190/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3812 - wine_quality_loss: 0.3657 - wine_type_loss: 0.0155 - wine_quality_root_mean_squared_error: 0.6047 - wine_type_accuracy: 0.9966 - val_loss: 0.5144 - val_wine_quality_loss: 0.5002 - val_wine_type_loss: 0.0142 - val_wine_quality_root_mean_squared_error: 0.7072 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 191/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3804 - wine_quality_loss: 0.3649 - wine_type_loss: 0.0155 - wine_quality_root_mean_squared_error: 0.6041 - wine_type_accuracy: 0.9966 - val_loss: 0.5291 - val_wine_quality_loss: 0.5147 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7174 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 192/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3804 - wine_quality_loss: 0.3649 - wine_type_loss: 0.0155 - wine_quality_root_mean_squared_error: 0.6040 - wine_type_accuracy: 0.9966 - val_loss: 0.5146 - val_wine_quality_loss: 0.5001 - val_wine_type_loss: 0.0145 - val_wine_quality_root_mean_squared_error: 0.7072 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 193/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3796 - wine_quality_loss: 0.3642 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.6035 - wine_type_accuracy: 0.9969 - val_loss: 0.5215 - val_wine_quality_loss: 0.5073 - val_wine_type_loss: 0.0142 - val_wine_quality_root_mean_squared_error: 0.7123 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 194/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3799 - wine_quality_loss: 0.3644 - wine_type_loss: 0.0155 - wine_quality_root_mean_squared_error: 0.6037 - wine_type_accuracy: 0.9966 - val_loss: 0.5149 - val_wine_quality_loss: 0.5007 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7076 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 195/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3797 - wine_quality_loss: 0.3643 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.6036 - wine_type_accuracy: 0.9966 - val_loss: 0.5158 - val_wine_quality_loss: 0.5014 - val_wine_type_loss: 0.0144 - val_wine_quality_root_mean_squared_error: 0.7081 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 196/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3785 - wine_quality_loss: 0.3632 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.6027 - wine_type_accuracy: 0.9966 - val_loss: 0.5106 - val_wine_quality_loss: 0.4965 - val_wine_type_loss: 0.0141 - val_wine_quality_root_mean_squared_error: 0.7046 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 197/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3789 - wine_quality_loss: 0.3636 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.6030 - wine_type_accuracy: 0.9969 - val_loss: 0.5112 - val_wine_quality_loss: 0.4969 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7049 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 198/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3767 - wine_quality_loss: 0.3614 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.6012 - wine_type_accuracy: 0.9966 - val_loss: 0.5156 - val_wine_quality_loss: 0.5014 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7081 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 199/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3777 - wine_quality_loss: 0.3624 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.6020 - wine_type_accuracy: 0.9966 - val_loss: 0.5141 - val_wine_quality_loss: 0.4998 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7070 - val_wine_type_accuracy: 0.9971\n",
            "Epoch 200/200\n",
            "130/130 [==============================] - 0s 3ms/step - loss: 0.3778 - wine_quality_loss: 0.3624 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.6020 - wine_type_accuracy: 0.9966 - val_loss: 0.5135 - val_wine_quality_loss: 0.4992 - val_wine_type_loss: 0.0143 - val_wine_quality_root_mean_squared_error: 0.7065 - val_wine_type_accuracy: 0.9971\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vq4AQ423GdsQ",
        "outputId": "1126a085-6579-48c4-baea-d38cf44840fe"
      },
      "source": [
        "model.save('/content/drive/MyDrive/wine1/model/model')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /content/drive/MyDrive/wine1/model/model/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ohkh2pr9Gyd-"
      },
      "source": [
        "reloaded = keras.models.load_model('/content/drive/MyDrive/wine1/model/model')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CubF2J2gSf6q",
        "outputId": "20e48079-d5bf-452a-e77d-30f86de06671"
      },
      "source": [
        "# Gather the training metrics\n",
        "loss, wine_quality_loss, wine_type_loss, wine_quality_rmse, wine_type_accuracy = model.evaluate(x=norm_val_X, y=val_Y)\n",
        "\n",
        "print()\n",
        "print(f'loss: {loss}')\n",
        "print(f'wine_quality_loss: {wine_quality_loss}')\n",
        "print(f'wine_type_loss: {wine_type_loss}')\n",
        "print(f'wine_quality_rmse: {wine_quality_rmse}')\n",
        "print(f'wine_type_accuracy: {wine_type_accuracy}')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "33/33 [==============================] - 0s 1ms/step - loss: 0.5135 - wine_quality_loss: 0.4992 - wine_type_loss: 0.0143 - wine_quality_root_mean_squared_error: 0.7065 - wine_type_accuracy: 0.9971\n",
            "\n",
            "loss: 0.5134527087211609\n",
            "wine_quality_loss: 0.499173104763031\n",
            "wine_type_loss: 0.0142796840518713\n",
            "wine_quality_rmse: 0.7065218091011047\n",
            "wine_type_accuracy: 0.9971153736114502\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gPtTGAP4usnm"
      },
      "source": [
        "## Analyze the Model Performance\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBq9PEeAaW-Y"
      },
      "source": [
        "predictions = reloaded.predict(norm_test_X)\n",
        "quality_pred = predictions[0]\n",
        "type_pred = predictions[1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u44QGijOXUnq",
        "outputId": "8a489361-1afc-4d31-a0ca-fd8e5b1b8bfa"
      },
      "source": [
        "type(norm_test_X)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "DsrD5zcwWmPl",
        "outputId": "59880339-a323-4279-d8a8-8e1e059bf724"
      },
      "source": [
        "norm_test_X"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "3772       0.286570         -0.134582     1.821711        2.391265  -0.179299   \n",
              "6009      -1.172003         -0.615164     1.061280        0.186260   0.356514   \n",
              "3464       0.286570          0.105709     0.853890        0.608271   5.601842   \n",
              "1518       0.133036          0.766509     0.992150       -0.678861   1.625545   \n",
              "3761       2.052210          0.886655    -0.597841       -0.636660   0.864127   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "3276       0.056269         -0.675237     0.369980       -0.763263  -0.686911   \n",
              "4414      -0.481100          0.105709    -0.528711       -0.953168  -0.517707   \n",
              "846       -0.634634          1.787746    -0.736101       -0.763263   0.694923   \n",
              "779       -0.097265          1.066873    -1.980443       -0.594459   0.553919   \n",
              "2377      -0.250799         -0.735310     0.369980        2.022006  -0.094697   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide   density        pH  \\\n",
              "3772             0.692765              0.844417  1.727786 -0.429419   \n",
              "6009             0.246341              1.180218 -0.266286 -0.680372   \n",
              "3464            -0.144280              0.473269  0.362895 -0.617634   \n",
              "1518            -1.316142             -1.682927  0.585938  0.637133   \n",
              "3761            -0.646507             -0.003922  0.029995 -2.813476   \n",
              "...                   ...                   ...       ...       ...   \n",
              "3276             1.641416              0.720701 -0.902126 -0.680372   \n",
              "4414            -0.869718             -0.763893 -1.348212  0.072488   \n",
              "846             -0.925521             -1.488516  0.725756  2.331068   \n",
              "779             -0.534901             -0.410418  0.912181  1.766423   \n",
              "2377             1.585613              1.109523  1.494756  0.950825   \n",
              "\n",
              "      sulphates   alcohol  \n",
              "3772   0.045635 -1.089430  \n",
              "6009  -0.483709 -0.640601  \n",
              "3464  -0.682213 -0.247876  \n",
              "1518   0.641147  0.004590  \n",
              "3761  -0.616045 -0.921119  \n",
              "...         ...       ...  \n",
              "3276  -1.211557  0.509523  \n",
              "4414  -0.946885  0.425367  \n",
              "846    0.839651 -0.584498  \n",
              "779    0.442643 -0.584498  \n",
              "2377   1.898339 -0.836964  \n",
              "\n",
              "[1300 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7098a7fc-09c4-462d-88df-9b2e923a626b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3772</th>\n",
              "      <td>0.286570</td>\n",
              "      <td>-0.134582</td>\n",
              "      <td>1.821711</td>\n",
              "      <td>2.391265</td>\n",
              "      <td>-0.179299</td>\n",
              "      <td>0.692765</td>\n",
              "      <td>0.844417</td>\n",
              "      <td>1.727786</td>\n",
              "      <td>-0.429419</td>\n",
              "      <td>0.045635</td>\n",
              "      <td>-1.089430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6009</th>\n",
              "      <td>-1.172003</td>\n",
              "      <td>-0.615164</td>\n",
              "      <td>1.061280</td>\n",
              "      <td>0.186260</td>\n",
              "      <td>0.356514</td>\n",
              "      <td>0.246341</td>\n",
              "      <td>1.180218</td>\n",
              "      <td>-0.266286</td>\n",
              "      <td>-0.680372</td>\n",
              "      <td>-0.483709</td>\n",
              "      <td>-0.640601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3464</th>\n",
              "      <td>0.286570</td>\n",
              "      <td>0.105709</td>\n",
              "      <td>0.853890</td>\n",
              "      <td>0.608271</td>\n",
              "      <td>5.601842</td>\n",
              "      <td>-0.144280</td>\n",
              "      <td>0.473269</td>\n",
              "      <td>0.362895</td>\n",
              "      <td>-0.617634</td>\n",
              "      <td>-0.682213</td>\n",
              "      <td>-0.247876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1518</th>\n",
              "      <td>0.133036</td>\n",
              "      <td>0.766509</td>\n",
              "      <td>0.992150</td>\n",
              "      <td>-0.678861</td>\n",
              "      <td>1.625545</td>\n",
              "      <td>-1.316142</td>\n",
              "      <td>-1.682927</td>\n",
              "      <td>0.585938</td>\n",
              "      <td>0.637133</td>\n",
              "      <td>0.641147</td>\n",
              "      <td>0.004590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3761</th>\n",
              "      <td>2.052210</td>\n",
              "      <td>0.886655</td>\n",
              "      <td>-0.597841</td>\n",
              "      <td>-0.636660</td>\n",
              "      <td>0.864127</td>\n",
              "      <td>-0.646507</td>\n",
              "      <td>-0.003922</td>\n",
              "      <td>0.029995</td>\n",
              "      <td>-2.813476</td>\n",
              "      <td>-0.616045</td>\n",
              "      <td>-0.921119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3276</th>\n",
              "      <td>0.056269</td>\n",
              "      <td>-0.675237</td>\n",
              "      <td>0.369980</td>\n",
              "      <td>-0.763263</td>\n",
              "      <td>-0.686911</td>\n",
              "      <td>1.641416</td>\n",
              "      <td>0.720701</td>\n",
              "      <td>-0.902126</td>\n",
              "      <td>-0.680372</td>\n",
              "      <td>-1.211557</td>\n",
              "      <td>0.509523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4414</th>\n",
              "      <td>-0.481100</td>\n",
              "      <td>0.105709</td>\n",
              "      <td>-0.528711</td>\n",
              "      <td>-0.953168</td>\n",
              "      <td>-0.517707</td>\n",
              "      <td>-0.869718</td>\n",
              "      <td>-0.763893</td>\n",
              "      <td>-1.348212</td>\n",
              "      <td>0.072488</td>\n",
              "      <td>-0.946885</td>\n",
              "      <td>0.425367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>846</th>\n",
              "      <td>-0.634634</td>\n",
              "      <td>1.787746</td>\n",
              "      <td>-0.736101</td>\n",
              "      <td>-0.763263</td>\n",
              "      <td>0.694923</td>\n",
              "      <td>-0.925521</td>\n",
              "      <td>-1.488516</td>\n",
              "      <td>0.725756</td>\n",
              "      <td>2.331068</td>\n",
              "      <td>0.839651</td>\n",
              "      <td>-0.584498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>779</th>\n",
              "      <td>-0.097265</td>\n",
              "      <td>1.066873</td>\n",
              "      <td>-1.980443</td>\n",
              "      <td>-0.594459</td>\n",
              "      <td>0.553919</td>\n",
              "      <td>-0.534901</td>\n",
              "      <td>-0.410418</td>\n",
              "      <td>0.912181</td>\n",
              "      <td>1.766423</td>\n",
              "      <td>0.442643</td>\n",
              "      <td>-0.584498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2377</th>\n",
              "      <td>-0.250799</td>\n",
              "      <td>-0.735310</td>\n",
              "      <td>0.369980</td>\n",
              "      <td>2.022006</td>\n",
              "      <td>-0.094697</td>\n",
              "      <td>1.585613</td>\n",
              "      <td>1.109523</td>\n",
              "      <td>1.494756</td>\n",
              "      <td>0.950825</td>\n",
              "      <td>1.898339</td>\n",
              "      <td>-0.836964</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1300 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7098a7fc-09c4-462d-88df-9b2e923a626b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7098a7fc-09c4-462d-88df-9b2e923a626b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7098a7fc-09c4-462d-88df-9b2e923a626b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q8XczJvYK-MP",
        "outputId": "edb47447-dae2-44d3-b923-4c9f918ec1f8"
      },
      "source": [
        "norm_test_X.iloc[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0.286570\n",
              "volatile acidity       -0.134582\n",
              "citric acid             1.821711\n",
              "residual sugar          2.391265\n",
              "chlorides              -0.179299\n",
              "free sulfur dioxide     0.692765\n",
              "total sulfur dioxide    0.844417\n",
              "density                 1.727786\n",
              "pH                     -0.429419\n",
              "sulphates               0.045635\n",
              "alcohol                -1.089430\n",
              "Name: 3772, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YLhgTR4xTIxj",
        "outputId": "d318a387-313f-437c-d882-5bcf41e35240"
      },
      "source": [
        "print(quality_pred[0])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5.2940645]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MPi-eYfGTUXi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fd32b53f-6609-4ba5-bfec-c20691ad834d"
      },
      "source": [
        "print(type_pred[0])\n",
        "print(type_pred[944])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.00010371]\n",
            "[1.3786797e-05]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kohk-9C6vt_s"
      },
      "source": [
        "### Plot Utilities\n",
        "\n",
        "We define a few utilities to visualize the model performance."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "62gEOFUhn6aQ"
      },
      "source": [
        "def plot_metrics(metric_name, title, ylim=5):\n",
        "    plt.title(title)\n",
        "    plt.ylim(0,ylim)\n",
        "    plt.plot(history.history[metric_name],color='blue',label=metric_name)\n",
        "    plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6rfgSx7uz5dj"
      },
      "source": [
        "def plot_confusion_matrix(y_true, y_pred, title='', labels=[0,1]):\n",
        "    cm = confusion_matrix(y_true, y_pred)\n",
        "    fig = plt.figure()\n",
        "    ax = fig.add_subplot(111)\n",
        "    cax = ax.matshow(cm)\n",
        "    plt.title('Confusion matrix of the classifier')\n",
        "    fig.colorbar(cax)\n",
        "    ax.set_xticklabels([''] + labels)\n",
        "    ax.set_yticklabels([''] + labels)\n",
        "    plt.xlabel('Predicted')\n",
        "    plt.ylabel('True')\n",
        "    fmt = 'd'\n",
        "    thresh = cm.max() / 2.\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "          plt.text(j, i, format(cm[i, j], fmt),\n",
        "                  horizontalalignment=\"center\",\n",
        "                  color=\"black\" if cm[i, j] > thresh else \"white\")\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dfVLIqi017Vf"
      },
      "source": [
        "def plot_diff(y_true, y_pred, title = '' ):\n",
        "    plt.scatter(y_true, y_pred)\n",
        "    plt.title(title)\n",
        "    plt.xlabel('True Values')\n",
        "    plt.ylabel('Predictions')\n",
        "    plt.axis('equal')\n",
        "    plt.axis('square')\n",
        "    plt.plot([-100, 100], [-100, 100])\n",
        "    return plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sd1jdFbwE0I"
      },
      "source": [
        "### Plots for Metrics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f3MwZ5J1pOfj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "18502808-bdcb-43be-dd4f-e6a2902359e6"
      },
      "source": [
        "plot_metrics('wine_quality_root_mean_squared_error', 'RMSE', ylim=2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QIAxEezCppnd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "3255ce52-24c9-4d34-c904-b7cd01e11f1c"
      },
      "source": [
        "plot_metrics('wine_type_loss', 'Wine Type Loss', ylim=0.2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uYV9AOAMwI9p"
      },
      "source": [
        "### Plots for Confusion Matrix\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "C3hvTYxIaf3n",
        "outputId": "83fd8b52-22b1-4b91-a512-58813dfa8f5b"
      },
      "source": [
        "plot_confusion_matrix(test_Y[1], np.round(type_pred), title='Wine Type', labels = [0, 1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SHvPXcjg17_I",
        "outputId": "77b3f0e5-d3cf-4204-c140-763ed7f75c2d"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn import metrics\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "target_names=['white','red']\n",
        "\n",
        "print(metrics.classification_report(test_Y[1], np.round(type_pred),target_names=target_names))\n",
        "print(\"Classification accuracy: %0.6f\" % metrics.accuracy_score(test_Y[1],np.round(type_pred)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       white       1.00      1.00      1.00      1003\n",
            "         red       0.99      0.99      0.99       297\n",
            "\n",
            "    accuracy                           0.99      1300\n",
            "   macro avg       0.99      0.99      0.99      1300\n",
            "weighted avg       0.99      0.99      0.99      1300\n",
            "\n",
            "Classification accuracy: 0.993846\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iIQfYdrzCtnZ",
        "outputId": "ca8f2464-5a71-406c-9d6e-0fb5b7f2f691"
      },
      "source": [
        "from sklearn.metrics import roc_auc_score\n",
        "roc_auc_score(test_Y[1], np.round(type_pred))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9912719753198318"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "GW91ym8P2I5y",
        "outputId": "f3d41674-6d5e-4b48-f240-12a812d42c91"
      },
      "source": [
        "scatter_plot = plot_diff(test_Y[0], quality_pred, title='Type')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(history.history.keys())"
      ],
      "metadata": {
        "id": "1JnkQDbHRJL9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7bfd3ea6-9848-4355-f7a7-88434a0bf402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'wine_quality_loss', 'wine_type_loss', 'wine_quality_root_mean_squared_error', 'wine_type_accuracy', 'val_loss', 'val_wine_quality_loss', 'val_wine_type_loss', 'val_wine_quality_root_mean_squared_error', 'val_wine_type_accuracy'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.plot(history.history['val_wine_quality_root_mean_squared_error'])\n",
        "plt.plot(history.history['wine_quality_root_mean_squared_error'])\n",
        "plt.title('model accuracy for Wine Type')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "0rzbjkzP0q5S",
        "outputId": "18926197-20c5-44bc-d3db-8d1d53fb7c34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "U7o-SuqG0ugD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(history.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(history.history['wine_type_accuracy'])\n",
        "plt.plot(history.history['wine_quality_root_mean_squared_error'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(history.history['wine_quality_loss'])\n",
        "plt.plot(history.history['wine_type_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633
        },
        "id": "l-Sob2Hvzmic",
        "outputId": "d747c2af-7c24-4b14-fb3e-beaa733822fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'wine_quality_loss', 'wine_type_loss', 'wine_quality_root_mean_squared_error', 'wine_type_accuracy', 'val_loss', 'val_wine_quality_loss', 'val_wine_type_loss', 'val_wine_quality_root_mean_squared_error', 'val_wine_type_accuracy'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "bIVM9_mkzn3l"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
